
CAN NORMAL MODE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022e8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080023a8  080023a8  000123a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080023d8  080023d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080023d8  080023d8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080023d8  080023d8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080023d8  080023d8  000123d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080023dc  080023dc  000123dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080023e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  080023ec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080023ec  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004793  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000011e2  00000000  00000000  0002480a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004c0  00000000  00000000  000259f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000374  00000000  00000000  00025eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017d41  00000000  00000000  00026224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005dea  00000000  00000000  0003df65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008a0f4  00000000  00000000  00043d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000f60  00000000  00000000  000cde44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ceda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002390 	.word	0x08002390

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002390 	.word	0x08002390

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <HAL_GPIO_EXTI_Callback>:

uint32_t TxMailBox;

int datacheck = 0 ;
int x=0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	0002      	movs	r2, r0
 8000228:	1dbb      	adds	r3, r7, #6
 800022a:	801a      	strh	r2, [r3, #0]


	if (GPIO_Pin == GPIO_PIN_0)
 800022c:	1dbb      	adds	r3, r7, #6
 800022e:	881b      	ldrh	r3, [r3, #0]
 8000230:	2b01      	cmp	r3, #1
 8000232:	d112      	bne.n	800025a <HAL_GPIO_EXTI_Callback+0x3a>
    {
		TxData[0] = 100; //Delay
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <HAL_GPIO_EXTI_Callback+0x44>)
 8000236:	2264      	movs	r2, #100	; 0x64
 8000238:	701a      	strb	r2, [r3, #0]
		TxData[1] = 10; //loop
 800023a:	4b0a      	ldr	r3, [pc, #40]	; (8000264 <HAL_GPIO_EXTI_Callback+0x44>)
 800023c:	220a      	movs	r2, #10
 800023e:	705a      	strb	r2, [r3, #1]

		if (HAL_OK == HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailBox))
 8000240:	4b09      	ldr	r3, [pc, #36]	; (8000268 <HAL_GPIO_EXTI_Callback+0x48>)
 8000242:	4a08      	ldr	r2, [pc, #32]	; (8000264 <HAL_GPIO_EXTI_Callback+0x44>)
 8000244:	4909      	ldr	r1, [pc, #36]	; (800026c <HAL_GPIO_EXTI_Callback+0x4c>)
 8000246:	480a      	ldr	r0, [pc, #40]	; (8000270 <HAL_GPIO_EXTI_Callback+0x50>)
 8000248:	f000 fcd8 	bl	8000bfc <HAL_CAN_AddTxMessage>
 800024c:	1e03      	subs	r3, r0, #0
 800024e:	d104      	bne.n	800025a <HAL_GPIO_EXTI_Callback+0x3a>
		{
			x++;
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <HAL_GPIO_EXTI_Callback+0x54>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	1c5a      	adds	r2, r3, #1
 8000256:	4b07      	ldr	r3, [pc, #28]	; (8000274 <HAL_GPIO_EXTI_Callback+0x54>)
 8000258:	601a      	str	r2, [r3, #0]
		}
	}
}
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	46bd      	mov	sp, r7
 800025e:	b002      	add	sp, #8
 8000260:	bd80      	pop	{r7, pc}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	2000008c 	.word	0x2000008c
 8000268:	20000094 	.word	0x20000094
 800026c:	20000050 	.word	0x20000050
 8000270:	20000028 	.word	0x20000028
 8000274:	2000009c 	.word	0x2000009c

08000278 <HAL_CAN_RxFifo1MsgPendingCallback>:
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <HAL_CAN_RxFifo1MsgPendingCallback+0x2c>)
 8000282:	4a09      	ldr	r2, [pc, #36]	; (80002a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000284:	6878      	ldr	r0, [r7, #4]
 8000286:	2101      	movs	r1, #1
 8000288:	f000 fd8a 	bl	8000da0 <HAL_CAN_GetRxMessage>
	if( RxHeader.DLC == 2)
 800028c:	4b06      	ldr	r3, [pc, #24]	; (80002a8 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 800028e:	691b      	ldr	r3, [r3, #16]
 8000290:	2b02      	cmp	r3, #2
 8000292:	d102      	bne.n	800029a <HAL_CAN_RxFifo1MsgPendingCallback+0x22>
	{
		datacheck = 1;
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8000296:	2201      	movs	r2, #1
 8000298:	601a      	str	r2, [r3, #0]
	}
}
 800029a:	46c0      	nop			; (mov r8, r8)
 800029c:	46bd      	mov	sp, r7
 800029e:	b002      	add	sp, #8
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	20000084 	.word	0x20000084
 80002a8:	20000068 	.word	0x20000068
 80002ac:	20000098 	.word	0x20000098

080002b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002b4:	f000 fa08 	bl	80006c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002b8:	f000 f820 	bl	80002fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002bc:	f000 f8b8 	bl	8000430 <MX_GPIO_Init>
  MX_CAN_Init();
 80002c0:	f000 f858 	bl	8000374 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */
HAL_CAN_Start(&hcan);
 80002c4:	4b0a      	ldr	r3, [pc, #40]	; (80002f0 <main+0x40>)
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 fc52 	bl	8000b70 <HAL_CAN_Start>
//activate notification
HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 80002cc:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <main+0x40>)
 80002ce:	2110      	movs	r1, #16
 80002d0:	0018      	movs	r0, r3
 80002d2:	f000 fe90 	bl	8000ff6 <HAL_CAN_ActivateNotification>
TxHeader.DLC=2;
 80002d6:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <main+0x44>)
 80002d8:	2202      	movs	r2, #2
 80002da:	611a      	str	r2, [r3, #16]
TxHeader.IDE = CAN_ID_STD;
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <main+0x44>)
 80002de:	2200      	movs	r2, #0
 80002e0:	609a      	str	r2, [r3, #8]
TxHeader.RTR = CAN_RTR_DATA;
 80002e2:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <main+0x44>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	60da      	str	r2, [r3, #12]
TxHeader.StdId = 0x446;
 80002e8:	4b02      	ldr	r3, [pc, #8]	; (80002f4 <main+0x44>)
 80002ea:	4a03      	ldr	r2, [pc, #12]	; (80002f8 <main+0x48>)
 80002ec:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002ee:	e7fe      	b.n	80002ee <main+0x3e>
 80002f0:	20000028 	.word	0x20000028
 80002f4:	20000050 	.word	0x20000050
 80002f8:	00000446 	.word	0x00000446

080002fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002fc:	b590      	push	{r4, r7, lr}
 80002fe:	b093      	sub	sp, #76	; 0x4c
 8000300:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000302:	2414      	movs	r4, #20
 8000304:	193b      	adds	r3, r7, r4
 8000306:	0018      	movs	r0, r3
 8000308:	2334      	movs	r3, #52	; 0x34
 800030a:	001a      	movs	r2, r3
 800030c:	2100      	movs	r1, #0
 800030e:	f002 f813 	bl	8002338 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000312:	1d3b      	adds	r3, r7, #4
 8000314:	0018      	movs	r0, r3
 8000316:	2310      	movs	r3, #16
 8000318:	001a      	movs	r2, r3
 800031a:	2100      	movs	r1, #0
 800031c:	f002 f80c 	bl	8002338 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000320:	193b      	adds	r3, r7, r4
 8000322:	2220      	movs	r2, #32
 8000324:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000326:	193b      	adds	r3, r7, r4
 8000328:	2201      	movs	r2, #1
 800032a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800032c:	193b      	adds	r3, r7, r4
 800032e:	2200      	movs	r2, #0
 8000330:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000332:	193b      	adds	r3, r7, r4
 8000334:	0018      	movs	r0, r3
 8000336:	f001 fb2d 	bl	8001994 <HAL_RCC_OscConfig>
 800033a:	1e03      	subs	r3, r0, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800033e:	f000 f8e7 	bl	8000510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000342:	1d3b      	adds	r3, r7, #4
 8000344:	2207      	movs	r2, #7
 8000346:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000348:	1d3b      	adds	r3, r7, #4
 800034a:	2203      	movs	r2, #3
 800034c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800034e:	1d3b      	adds	r3, r7, #4
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000354:	1d3b      	adds	r3, r7, #4
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	2101      	movs	r1, #1
 800035e:	0018      	movs	r0, r3
 8000360:	f001 fe9e 	bl	80020a0 <HAL_RCC_ClockConfig>
 8000364:	1e03      	subs	r3, r0, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000368:	f000 f8d2 	bl	8000510 <Error_Handler>
  }
}
 800036c:	46c0      	nop			; (mov r8, r8)
 800036e:	46bd      	mov	sp, r7
 8000370:	b013      	add	sp, #76	; 0x4c
 8000372:	bd90      	pop	{r4, r7, pc}

08000374 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b08a      	sub	sp, #40	; 0x28
 8000378:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 800037a:	4b2b      	ldr	r3, [pc, #172]	; (8000428 <MX_CAN_Init+0xb4>)
 800037c:	4a2b      	ldr	r2, [pc, #172]	; (800042c <MX_CAN_Init+0xb8>)
 800037e:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 6;
 8000380:	4b29      	ldr	r3, [pc, #164]	; (8000428 <MX_CAN_Init+0xb4>)
 8000382:	2206      	movs	r2, #6
 8000384:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_LOOPBACK;
 8000386:	4b28      	ldr	r3, [pc, #160]	; (8000428 <MX_CAN_Init+0xb4>)
 8000388:	2280      	movs	r2, #128	; 0x80
 800038a:	05d2      	lsls	r2, r2, #23
 800038c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800038e:	4b26      	ldr	r3, [pc, #152]	; (8000428 <MX_CAN_Init+0xb4>)
 8000390:	2200      	movs	r2, #0
 8000392:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000394:	4b24      	ldr	r3, [pc, #144]	; (8000428 <MX_CAN_Init+0xb4>)
 8000396:	22c0      	movs	r2, #192	; 0xc0
 8000398:	0312      	lsls	r2, r2, #12
 800039a:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800039c:	4b22      	ldr	r3, [pc, #136]	; (8000428 <MX_CAN_Init+0xb4>)
 800039e:	2280      	movs	r2, #128	; 0x80
 80003a0:	0352      	lsls	r2, r2, #13
 80003a2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003a4:	4b20      	ldr	r3, [pc, #128]	; (8000428 <MX_CAN_Init+0xb4>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003aa:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <MX_CAN_Init+0xb4>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003b0:	4b1d      	ldr	r3, [pc, #116]	; (8000428 <MX_CAN_Init+0xb4>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003b6:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <MX_CAN_Init+0xb4>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003bc:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <MX_CAN_Init+0xb4>)
 80003be:	2200      	movs	r2, #0
 80003c0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003c2:	4b19      	ldr	r3, [pc, #100]	; (8000428 <MX_CAN_Init+0xb4>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003c8:	4b17      	ldr	r3, [pc, #92]	; (8000428 <MX_CAN_Init+0xb4>)
 80003ca:	0018      	movs	r0, r3
 80003cc:	f000 f9e0 	bl	8000790 <HAL_CAN_Init>
 80003d0:	1e03      	subs	r3, r0, #0
 80003d2:	d001      	beq.n	80003d8 <MX_CAN_Init+0x64>
  {
    Error_Handler();
 80003d4:	f000 f89c 	bl	8000510 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  CAN_FilterTypeDef canfilterconfig;
   canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80003d8:	003b      	movs	r3, r7
 80003da:	2201      	movs	r2, #1
 80003dc:	621a      	str	r2, [r3, #32]
   canfilterconfig.FilterBank = 10;
 80003de:	003b      	movs	r3, r7
 80003e0:	220a      	movs	r2, #10
 80003e2:	615a      	str	r2, [r3, #20]
   canfilterconfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 80003e4:	003b      	movs	r3, r7
 80003e6:	2201      	movs	r2, #1
 80003e8:	611a      	str	r2, [r3, #16]
   canfilterconfig.FilterIdHigh = 0;
 80003ea:	003b      	movs	r3, r7
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
   canfilterconfig.FilterIdLow = 0x0000;
 80003f0:	003b      	movs	r3, r7
 80003f2:	2200      	movs	r2, #0
 80003f4:	605a      	str	r2, [r3, #4]
   canfilterconfig.FilterMaskIdHigh = 0;
 80003f6:	003b      	movs	r3, r7
 80003f8:	2200      	movs	r2, #0
 80003fa:	609a      	str	r2, [r3, #8]
   canfilterconfig.FilterMaskIdLow = 0x0000;
 80003fc:	003b      	movs	r3, r7
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]
   canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000402:	003b      	movs	r3, r7
 8000404:	2200      	movs	r2, #0
 8000406:	619a      	str	r2, [r3, #24]
   canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000408:	003b      	movs	r3, r7
 800040a:	2201      	movs	r2, #1
 800040c:	61da      	str	r2, [r3, #28]
   canfilterconfig.SlaveStartFilterBank = 0;
 800040e:	003b      	movs	r3, r7
 8000410:	2200      	movs	r2, #0
 8000412:	625a      	str	r2, [r3, #36]	; 0x24

   HAL_CAN_ConfigFilter(&hcan, &canfilterconfig);
 8000414:	003a      	movs	r2, r7
 8000416:	4b04      	ldr	r3, [pc, #16]	; (8000428 <MX_CAN_Init+0xb4>)
 8000418:	0011      	movs	r1, r2
 800041a:	0018      	movs	r0, r3
 800041c:	f000 fab6 	bl	800098c <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN_Init 2 */

}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b00a      	add	sp, #40	; 0x28
 8000426:	bd80      	pop	{r7, pc}
 8000428:	20000028 	.word	0x20000028
 800042c:	40006400 	.word	0x40006400

08000430 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000430:	b590      	push	{r4, r7, lr}
 8000432:	b089      	sub	sp, #36	; 0x24
 8000434:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000436:	240c      	movs	r4, #12
 8000438:	193b      	adds	r3, r7, r4
 800043a:	0018      	movs	r0, r3
 800043c:	2314      	movs	r3, #20
 800043e:	001a      	movs	r2, r3
 8000440:	2100      	movs	r1, #0
 8000442:	f001 ff79 	bl	8002338 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000446:	4b31      	ldr	r3, [pc, #196]	; (800050c <MX_GPIO_Init+0xdc>)
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	4b30      	ldr	r3, [pc, #192]	; (800050c <MX_GPIO_Init+0xdc>)
 800044c:	2180      	movs	r1, #128	; 0x80
 800044e:	03c9      	lsls	r1, r1, #15
 8000450:	430a      	orrs	r2, r1
 8000452:	615a      	str	r2, [r3, #20]
 8000454:	4b2d      	ldr	r3, [pc, #180]	; (800050c <MX_GPIO_Init+0xdc>)
 8000456:	695a      	ldr	r2, [r3, #20]
 8000458:	2380      	movs	r3, #128	; 0x80
 800045a:	03db      	lsls	r3, r3, #15
 800045c:	4013      	ands	r3, r2
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000462:	4b2a      	ldr	r3, [pc, #168]	; (800050c <MX_GPIO_Init+0xdc>)
 8000464:	695a      	ldr	r2, [r3, #20]
 8000466:	4b29      	ldr	r3, [pc, #164]	; (800050c <MX_GPIO_Init+0xdc>)
 8000468:	2180      	movs	r1, #128	; 0x80
 800046a:	0289      	lsls	r1, r1, #10
 800046c:	430a      	orrs	r2, r1
 800046e:	615a      	str	r2, [r3, #20]
 8000470:	4b26      	ldr	r3, [pc, #152]	; (800050c <MX_GPIO_Init+0xdc>)
 8000472:	695a      	ldr	r2, [r3, #20]
 8000474:	2380      	movs	r3, #128	; 0x80
 8000476:	029b      	lsls	r3, r3, #10
 8000478:	4013      	ands	r3, r2
 800047a:	607b      	str	r3, [r7, #4]
 800047c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800047e:	4b23      	ldr	r3, [pc, #140]	; (800050c <MX_GPIO_Init+0xdc>)
 8000480:	695a      	ldr	r2, [r3, #20]
 8000482:	4b22      	ldr	r3, [pc, #136]	; (800050c <MX_GPIO_Init+0xdc>)
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	02c9      	lsls	r1, r1, #11
 8000488:	430a      	orrs	r2, r1
 800048a:	615a      	str	r2, [r3, #20]
 800048c:	4b1f      	ldr	r3, [pc, #124]	; (800050c <MX_GPIO_Init+0xdc>)
 800048e:	695a      	ldr	r2, [r3, #20]
 8000490:	2380      	movs	r3, #128	; 0x80
 8000492:	02db      	lsls	r3, r3, #11
 8000494:	4013      	ands	r3, r2
 8000496:	603b      	str	r3, [r7, #0]
 8000498:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800049a:	2390      	movs	r3, #144	; 0x90
 800049c:	05db      	lsls	r3, r3, #23
 800049e:	2200      	movs	r2, #0
 80004a0:	2120      	movs	r1, #32
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 fa3c 	bl	8001920 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2201      	movs	r2, #1
 80004ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	2288      	movs	r2, #136	; 0x88
 80004b2:	0352      	lsls	r2, r2, #13
 80004b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	193a      	adds	r2, r7, r4
 80004be:	2390      	movs	r3, #144	; 0x90
 80004c0:	05db      	lsls	r3, r3, #23
 80004c2:	0011      	movs	r1, r2
 80004c4:	0018      	movs	r0, r3
 80004c6:	f001 f8b3 	bl	8001630 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80004ca:	0021      	movs	r1, r4
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2220      	movs	r2, #32
 80004d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2201      	movs	r2, #1
 80004d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e4:	187a      	adds	r2, r7, r1
 80004e6:	2390      	movs	r3, #144	; 0x90
 80004e8:	05db      	lsls	r3, r3, #23
 80004ea:	0011      	movs	r1, r2
 80004ec:	0018      	movs	r0, r3
 80004ee:	f001 f89f 	bl	8001630 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2100      	movs	r1, #0
 80004f6:	2005      	movs	r0, #5
 80004f8:	f001 f868 	bl	80015cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80004fc:	2005      	movs	r0, #5
 80004fe:	f001 f87a 	bl	80015f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	b009      	add	sp, #36	; 0x24
 8000508:	bd90      	pop	{r4, r7, pc}
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	40021000 	.word	0x40021000

08000510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000514:	b672      	cpsid	i
}
 8000516:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000518:	e7fe      	b.n	8000518 <Error_Handler+0x8>
	...

0800051c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000522:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <HAL_MspInit+0x44>)
 8000524:	699a      	ldr	r2, [r3, #24]
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <HAL_MspInit+0x44>)
 8000528:	2101      	movs	r1, #1
 800052a:	430a      	orrs	r2, r1
 800052c:	619a      	str	r2, [r3, #24]
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <HAL_MspInit+0x44>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	2201      	movs	r2, #1
 8000534:	4013      	ands	r3, r2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <HAL_MspInit+0x44>)
 800053c:	69da      	ldr	r2, [r3, #28]
 800053e:	4b08      	ldr	r3, [pc, #32]	; (8000560 <HAL_MspInit+0x44>)
 8000540:	2180      	movs	r1, #128	; 0x80
 8000542:	0549      	lsls	r1, r1, #21
 8000544:	430a      	orrs	r2, r1
 8000546:	61da      	str	r2, [r3, #28]
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <HAL_MspInit+0x44>)
 800054a:	69da      	ldr	r2, [r3, #28]
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	055b      	lsls	r3, r3, #21
 8000550:	4013      	ands	r3, r2
 8000552:	603b      	str	r3, [r7, #0]
 8000554:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	46bd      	mov	sp, r7
 800055a:	b002      	add	sp, #8
 800055c:	bd80      	pop	{r7, pc}
 800055e:	46c0      	nop			; (mov r8, r8)
 8000560:	40021000 	.word	0x40021000

08000564 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b08b      	sub	sp, #44	; 0x2c
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056c:	2414      	movs	r4, #20
 800056e:	193b      	adds	r3, r7, r4
 8000570:	0018      	movs	r0, r3
 8000572:	2314      	movs	r3, #20
 8000574:	001a      	movs	r2, r3
 8000576:	2100      	movs	r1, #0
 8000578:	f001 fede 	bl	8002338 <memset>
  if(hcan->Instance==CAN)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a20      	ldr	r2, [pc, #128]	; (8000604 <HAL_CAN_MspInit+0xa0>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d13a      	bne.n	80005fc <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000586:	4b20      	ldr	r3, [pc, #128]	; (8000608 <HAL_CAN_MspInit+0xa4>)
 8000588:	69da      	ldr	r2, [r3, #28]
 800058a:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <HAL_CAN_MspInit+0xa4>)
 800058c:	2180      	movs	r1, #128	; 0x80
 800058e:	0489      	lsls	r1, r1, #18
 8000590:	430a      	orrs	r2, r1
 8000592:	61da      	str	r2, [r3, #28]
 8000594:	4b1c      	ldr	r3, [pc, #112]	; (8000608 <HAL_CAN_MspInit+0xa4>)
 8000596:	69da      	ldr	r2, [r3, #28]
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	049b      	lsls	r3, r3, #18
 800059c:	4013      	ands	r3, r2
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	4b19      	ldr	r3, [pc, #100]	; (8000608 <HAL_CAN_MspInit+0xa4>)
 80005a4:	695a      	ldr	r2, [r3, #20]
 80005a6:	4b18      	ldr	r3, [pc, #96]	; (8000608 <HAL_CAN_MspInit+0xa4>)
 80005a8:	2180      	movs	r1, #128	; 0x80
 80005aa:	02c9      	lsls	r1, r1, #11
 80005ac:	430a      	orrs	r2, r1
 80005ae:	615a      	str	r2, [r3, #20]
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <HAL_CAN_MspInit+0xa4>)
 80005b2:	695a      	ldr	r2, [r3, #20]
 80005b4:	2380      	movs	r3, #128	; 0x80
 80005b6:	02db      	lsls	r3, r3, #11
 80005b8:	4013      	ands	r3, r2
 80005ba:	60fb      	str	r3, [r7, #12]
 80005bc:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	22c0      	movs	r2, #192	; 0xc0
 80005c2:	0092      	lsls	r2, r2, #2
 80005c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c6:	0021      	movs	r1, r4
 80005c8:	187b      	adds	r3, r7, r1
 80005ca:	2202      	movs	r2, #2
 80005cc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ce:	187b      	adds	r3, r7, r1
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	2203      	movs	r2, #3
 80005d8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_CAN;
 80005da:	187b      	adds	r3, r7, r1
 80005dc:	2204      	movs	r2, #4
 80005de:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e0:	187b      	adds	r3, r7, r1
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <HAL_CAN_MspInit+0xa8>)
 80005e4:	0019      	movs	r1, r3
 80005e6:	0010      	movs	r0, r2
 80005e8:	f001 f822 	bl	8001630 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CEC_CAN_IRQn, 0, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2100      	movs	r1, #0
 80005f0:	201e      	movs	r0, #30
 80005f2:	f000 ffeb 	bl	80015cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_CAN_IRQn);
 80005f6:	201e      	movs	r0, #30
 80005f8:	f000 fffd 	bl	80015f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 80005fc:	46c0      	nop			; (mov r8, r8)
 80005fe:	46bd      	mov	sp, r7
 8000600:	b00b      	add	sp, #44	; 0x2c
 8000602:	bd90      	pop	{r4, r7, pc}
 8000604:	40006400 	.word	0x40006400
 8000608:	40021000 	.word	0x40021000
 800060c:	48000400 	.word	0x48000400

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <NMI_Handler+0x4>

08000616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061a:	e7fe      	b.n	800061a <HardFault_Handler+0x4>

0800061c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000620:	46c0      	nop			; (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}

08000630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000634:	f000 f890 	bl	8000758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000638:	46c0      	nop			; (mov r8, r8)
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000642:	2001      	movs	r0, #1
 8000644:	f001 f98a 	bl	800195c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8000648:	46c0      	nop			; (mov r8, r8)
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <CEC_CAN_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC and CAN interrupts / HDMI-CEC wake-up interrupt through EXTI line 27.
  */
void CEC_CAN_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_CAN_IRQn 0 */

  /* USER CODE END CEC_CAN_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000654:	4b03      	ldr	r3, [pc, #12]	; (8000664 <CEC_CAN_IRQHandler+0x14>)
 8000656:	0018      	movs	r0, r3
 8000658:	f000 fcf7 	bl	800104a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CEC_CAN_IRQn 1 */

  /* USER CODE END CEC_CAN_IRQn 1 */
}
 800065c:	46c0      	nop			; (mov r8, r8)
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	20000028 	.word	0x20000028

08000668 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000674:	480d      	ldr	r0, [pc, #52]	; (80006ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000676:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000678:	f7ff fff6 	bl	8000668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800067c:	480c      	ldr	r0, [pc, #48]	; (80006b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800067e:	490d      	ldr	r1, [pc, #52]	; (80006b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000680:	4a0d      	ldr	r2, [pc, #52]	; (80006b8 <LoopForever+0xe>)
  movs r3, #0
 8000682:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000684:	e002      	b.n	800068c <LoopCopyDataInit>

08000686 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000686:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000688:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068a:	3304      	adds	r3, #4

0800068c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800068c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800068e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000690:	d3f9      	bcc.n	8000686 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000692:	4a0a      	ldr	r2, [pc, #40]	; (80006bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000694:	4c0a      	ldr	r4, [pc, #40]	; (80006c0 <LoopForever+0x16>)
  movs r3, #0
 8000696:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000698:	e001      	b.n	800069e <LoopFillZerobss>

0800069a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800069c:	3204      	adds	r2, #4

0800069e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800069e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a0:	d3fb      	bcc.n	800069a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006a2:	f001 fe51 	bl	8002348 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006a6:	f7ff fe03 	bl	80002b0 <main>

080006aa <LoopForever>:

LoopForever:
    b LoopForever
 80006aa:	e7fe      	b.n	80006aa <LoopForever>
  ldr   r0, =_estack
 80006ac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80006b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006b8:	080023e0 	.word	0x080023e0
  ldr r2, =_sbss
 80006bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006c0:	200000a4 	.word	0x200000a4

080006c4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c4:	e7fe      	b.n	80006c4 <ADC1_COMP_IRQHandler>
	...

080006c8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <HAL_Init+0x24>)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <HAL_Init+0x24>)
 80006d2:	2110      	movs	r1, #16
 80006d4:	430a      	orrs	r2, r1
 80006d6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80006d8:	2003      	movs	r0, #3
 80006da:	f000 f809 	bl	80006f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006de:	f7ff ff1d 	bl	800051c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006e2:	2300      	movs	r3, #0
}
 80006e4:	0018      	movs	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	40022000 	.word	0x40022000

080006f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006f8:	4b14      	ldr	r3, [pc, #80]	; (800074c <HAL_InitTick+0x5c>)
 80006fa:	681c      	ldr	r4, [r3, #0]
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <HAL_InitTick+0x60>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	0019      	movs	r1, r3
 8000702:	23fa      	movs	r3, #250	; 0xfa
 8000704:	0098      	lsls	r0, r3, #2
 8000706:	f7ff fcff 	bl	8000108 <__udivsi3>
 800070a:	0003      	movs	r3, r0
 800070c:	0019      	movs	r1, r3
 800070e:	0020      	movs	r0, r4
 8000710:	f7ff fcfa 	bl	8000108 <__udivsi3>
 8000714:	0003      	movs	r3, r0
 8000716:	0018      	movs	r0, r3
 8000718:	f000 ff7d 	bl	8001616 <HAL_SYSTICK_Config>
 800071c:	1e03      	subs	r3, r0, #0
 800071e:	d001      	beq.n	8000724 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000720:	2301      	movs	r3, #1
 8000722:	e00f      	b.n	8000744 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b03      	cmp	r3, #3
 8000728:	d80b      	bhi.n	8000742 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800072a:	6879      	ldr	r1, [r7, #4]
 800072c:	2301      	movs	r3, #1
 800072e:	425b      	negs	r3, r3
 8000730:	2200      	movs	r2, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f000 ff4a 	bl	80015cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_InitTick+0x64>)
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800073e:	2300      	movs	r3, #0
 8000740:	e000      	b.n	8000744 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000742:	2301      	movs	r3, #1
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	b003      	add	sp, #12
 800074a:	bd90      	pop	{r4, r7, pc}
 800074c:	20000000 	.word	0x20000000
 8000750:	20000008 	.word	0x20000008
 8000754:	20000004 	.word	0x20000004

08000758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <HAL_IncTick+0x1c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	001a      	movs	r2, r3
 8000762:	4b05      	ldr	r3, [pc, #20]	; (8000778 <HAL_IncTick+0x20>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	18d2      	adds	r2, r2, r3
 8000768:	4b03      	ldr	r3, [pc, #12]	; (8000778 <HAL_IncTick+0x20>)
 800076a:	601a      	str	r2, [r3, #0]
}
 800076c:	46c0      	nop			; (mov r8, r8)
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	20000008 	.word	0x20000008
 8000778:	200000a0 	.word	0x200000a0

0800077c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  return uwTick;
 8000780:	4b02      	ldr	r3, [pc, #8]	; (800078c <HAL_GetTick+0x10>)
 8000782:	681b      	ldr	r3, [r3, #0]
}
 8000784:	0018      	movs	r0, r3
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	200000a0 	.word	0x200000a0

08000790 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d101      	bne.n	80007a2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800079e:	2301      	movs	r3, #1
 80007a0:	e0f0      	b.n	8000984 <HAL_CAN_Init+0x1f4>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2220      	movs	r2, #32
 80007a6:	5c9b      	ldrb	r3, [r3, r2]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d103      	bne.n	80007b6 <HAL_CAN_Init+0x26>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff fed7 	bl	8000564 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2101      	movs	r1, #1
 80007c2:	430a      	orrs	r2, r1
 80007c4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80007c6:	f7ff ffd9 	bl	800077c <HAL_GetTick>
 80007ca:	0003      	movs	r3, r0
 80007cc:	60fb      	str	r3, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007ce:	e013      	b.n	80007f8 <HAL_CAN_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80007d0:	f7ff ffd4 	bl	800077c <HAL_GetTick>
 80007d4:	0002      	movs	r2, r0
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	2b0a      	cmp	r3, #10
 80007dc:	d90c      	bls.n	80007f8 <HAL_CAN_Init+0x68>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007e2:	2280      	movs	r2, #128	; 0x80
 80007e4:	0292      	lsls	r2, r2, #10
 80007e6:	431a      	orrs	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2220      	movs	r2, #32
 80007f0:	2105      	movs	r1, #5
 80007f2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80007f4:	2301      	movs	r3, #1
 80007f6:	e0c5      	b.n	8000984 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2201      	movs	r2, #1
 8000800:	4013      	ands	r3, r2
 8000802:	d0e5      	beq.n	80007d0 <HAL_CAN_Init+0x40>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	2102      	movs	r1, #2
 8000810:	438a      	bics	r2, r1
 8000812:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000814:	f7ff ffb2 	bl	800077c <HAL_GetTick>
 8000818:	0003      	movs	r3, r0
 800081a:	60fb      	str	r3, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800081c:	e013      	b.n	8000846 <HAL_CAN_Init+0xb6>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800081e:	f7ff ffad 	bl	800077c <HAL_GetTick>
 8000822:	0002      	movs	r2, r0
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	1ad3      	subs	r3, r2, r3
 8000828:	2b0a      	cmp	r3, #10
 800082a:	d90c      	bls.n	8000846 <HAL_CAN_Init+0xb6>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000830:	2280      	movs	r2, #128	; 0x80
 8000832:	0292      	lsls	r2, r2, #10
 8000834:	431a      	orrs	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2220      	movs	r2, #32
 800083e:	2105      	movs	r1, #5
 8000840:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e09e      	b.n	8000984 <HAL_CAN_Init+0x1f4>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	2202      	movs	r2, #2
 800084e:	4013      	ands	r3, r2
 8000850:	d1e5      	bne.n	800081e <HAL_CAN_Init+0x8e>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	7e1b      	ldrb	r3, [r3, #24]
 8000856:	2b01      	cmp	r3, #1
 8000858:	d108      	bne.n	800086c <HAL_CAN_Init+0xdc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	681a      	ldr	r2, [r3, #0]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	430a      	orrs	r2, r1
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	e007      	b.n	800087c <HAL_CAN_Init+0xec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	438a      	bics	r2, r1
 800087a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7e5b      	ldrb	r3, [r3, #25]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d108      	bne.n	8000896 <HAL_CAN_Init+0x106>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2140      	movs	r1, #64	; 0x40
 8000890:	430a      	orrs	r2, r1
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	e007      	b.n	80008a6 <HAL_CAN_Init+0x116>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2140      	movs	r1, #64	; 0x40
 80008a2:	438a      	bics	r2, r1
 80008a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	7e9b      	ldrb	r3, [r3, #26]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d108      	bne.n	80008c0 <HAL_CAN_Init+0x130>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2120      	movs	r1, #32
 80008ba:	430a      	orrs	r2, r1
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	e007      	b.n	80008d0 <HAL_CAN_Init+0x140>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2120      	movs	r1, #32
 80008cc:	438a      	bics	r2, r1
 80008ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	7edb      	ldrb	r3, [r3, #27]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d108      	bne.n	80008ea <HAL_CAN_Init+0x15a>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	2110      	movs	r1, #16
 80008e4:	438a      	bics	r2, r1
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	e007      	b.n	80008fa <HAL_CAN_Init+0x16a>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2110      	movs	r1, #16
 80008f6:	430a      	orrs	r2, r1
 80008f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	7f1b      	ldrb	r3, [r3, #28]
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d108      	bne.n	8000914 <HAL_CAN_Init+0x184>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	681a      	ldr	r2, [r3, #0]
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2108      	movs	r1, #8
 800090e:	430a      	orrs	r2, r1
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	e007      	b.n	8000924 <HAL_CAN_Init+0x194>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	2108      	movs	r1, #8
 8000920:	438a      	bics	r2, r1
 8000922:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	7f5b      	ldrb	r3, [r3, #29]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d108      	bne.n	800093e <HAL_CAN_Init+0x1ae>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	2104      	movs	r1, #4
 8000938:	430a      	orrs	r2, r1
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	e007      	b.n	800094e <HAL_CAN_Init+0x1be>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	2104      	movs	r1, #4
 800094a:	438a      	bics	r2, r1
 800094c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	689a      	ldr	r2, [r3, #8]
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	68db      	ldr	r3, [r3, #12]
 8000956:	431a      	orrs	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	691b      	ldr	r3, [r3, #16]
 800095c:	431a      	orrs	r2, r3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	695b      	ldr	r3, [r3, #20]
 8000962:	431a      	orrs	r2, r3
 8000964:	0011      	movs	r1, r2
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	1e5a      	subs	r2, r3, #1
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	430a      	orrs	r2, r1
 8000972:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	2220      	movs	r2, #32
 800097e:	2101      	movs	r1, #1
 8000980:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8000982:	2300      	movs	r3, #0
}
 8000984:	0018      	movs	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	b004      	add	sp, #16
 800098a:	bd80      	pop	{r7, pc}

0800098c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800099c:	2013      	movs	r0, #19
 800099e:	183b      	adds	r3, r7, r0
 80009a0:	687a      	ldr	r2, [r7, #4]
 80009a2:	2120      	movs	r1, #32
 80009a4:	5c52      	ldrb	r2, [r2, r1]
 80009a6:	701a      	strb	r2, [r3, #0]

  if ((state == HAL_CAN_STATE_READY) ||
 80009a8:	0002      	movs	r2, r0
 80009aa:	18bb      	adds	r3, r7, r2
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d004      	beq.n	80009bc <HAL_CAN_ConfigFilter+0x30>
 80009b2:	18bb      	adds	r3, r7, r2
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d000      	beq.n	80009bc <HAL_CAN_ConfigFilter+0x30>
 80009ba:	e0cd      	b.n	8000b58 <HAL_CAN_ConfigFilter+0x1cc>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80009bc:	697a      	ldr	r2, [r7, #20]
 80009be:	2380      	movs	r3, #128	; 0x80
 80009c0:	009b      	lsls	r3, r3, #2
 80009c2:	58d3      	ldr	r3, [r2, r3]
 80009c4:	2201      	movs	r2, #1
 80009c6:	431a      	orrs	r2, r3
 80009c8:	0011      	movs	r1, r2
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	50d1      	str	r1, [r2, r3]

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	221f      	movs	r2, #31
 80009d8:	4013      	ands	r3, r2
 80009da:	2201      	movs	r2, #1
 80009dc:	409a      	lsls	r2, r3
 80009de:	0013      	movs	r3, r2
 80009e0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80009e2:	697a      	ldr	r2, [r7, #20]
 80009e4:	2387      	movs	r3, #135	; 0x87
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	58d3      	ldr	r3, [r2, r3]
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	43d2      	mvns	r2, r2
 80009ee:	401a      	ands	r2, r3
 80009f0:	0011      	movs	r1, r2
 80009f2:	697a      	ldr	r2, [r7, #20]
 80009f4:	2387      	movs	r3, #135	; 0x87
 80009f6:	009b      	lsls	r3, r3, #2
 80009f8:	50d1      	str	r1, [r2, r3]

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d129      	bne.n	8000a56 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000a02:	697a      	ldr	r2, [r7, #20]
 8000a04:	2383      	movs	r3, #131	; 0x83
 8000a06:	009b      	lsls	r3, r3, #2
 8000a08:	58d3      	ldr	r3, [r2, r3]
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	43d2      	mvns	r2, r2
 8000a0e:	401a      	ands	r2, r3
 8000a10:	0011      	movs	r1, r2
 8000a12:	697a      	ldr	r2, [r7, #20]
 8000a14:	2383      	movs	r3, #131	; 0x83
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	50d1      	str	r1, [r2, r3]

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685b      	ldr	r3, [r3, #4]
 8000a24:	041b      	lsls	r3, r3, #16
 8000a26:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000a2c:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3248      	adds	r2, #72	; 0x48
 8000a32:	00d2      	lsls	r2, r2, #3
 8000a34:	50d1      	str	r1, [r2, r3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	041b      	lsls	r3, r3, #16
 8000a42:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a4a:	6979      	ldr	r1, [r7, #20]
 8000a4c:	3348      	adds	r3, #72	; 0x48
 8000a4e:	00db      	lsls	r3, r3, #3
 8000a50:	18cb      	adds	r3, r1, r3
 8000a52:	3304      	adds	r3, #4
 8000a54:	601a      	str	r2, [r3, #0]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	69db      	ldr	r3, [r3, #28]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d128      	bne.n	8000ab0 <HAL_CAN_ConfigFilter+0x124>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000a5e:	697a      	ldr	r2, [r7, #20]
 8000a60:	2383      	movs	r3, #131	; 0x83
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	58d2      	ldr	r2, [r2, r3]
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	431a      	orrs	r2, r3
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	697a      	ldr	r2, [r7, #20]
 8000a6e:	2383      	movs	r3, #131	; 0x83
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	50d1      	str	r1, [r2, r3]

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	0418      	lsls	r0, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	041b      	lsls	r3, r3, #16
 8000a80:	0c19      	lsrs	r1, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	695a      	ldr	r2, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000a86:	4301      	orrs	r1, r0
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	3248      	adds	r2, #72	; 0x48
 8000a8c:	00d2      	lsls	r2, r2, #3
 8000a8e:	50d1      	str	r1, [r2, r3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	041b      	lsls	r3, r3, #16
 8000a9c:	0c1a      	lsrs	r2, r3, #16
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000aa2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000aa4:	6979      	ldr	r1, [r7, #20]
 8000aa6:	3348      	adds	r3, #72	; 0x48
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	18cb      	adds	r3, r1, r3
 8000aac:	3304      	adds	r3, #4
 8000aae:	601a      	str	r2, [r3, #0]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d10c      	bne.n	8000ad2 <HAL_CAN_ConfigFilter+0x146>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000ab8:	697a      	ldr	r2, [r7, #20]
 8000aba:	2381      	movs	r3, #129	; 0x81
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	58d3      	ldr	r3, [r2, r3]
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	43d2      	mvns	r2, r2
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	2381      	movs	r3, #129	; 0x81
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	50d1      	str	r1, [r2, r3]
 8000ad0:	e00a      	b.n	8000ae8 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000ad2:	697a      	ldr	r2, [r7, #20]
 8000ad4:	2381      	movs	r3, #129	; 0x81
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	58d2      	ldr	r2, [r2, r3]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	431a      	orrs	r2, r3
 8000ade:	0011      	movs	r1, r2
 8000ae0:	697a      	ldr	r2, [r7, #20]
 8000ae2:	2381      	movs	r3, #129	; 0x81
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	50d1      	str	r1, [r2, r3]
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	691b      	ldr	r3, [r3, #16]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10c      	bne.n	8000b0a <HAL_CAN_ConfigFilter+0x17e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000af0:	697a      	ldr	r2, [r7, #20]
 8000af2:	2385      	movs	r3, #133	; 0x85
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	58d3      	ldr	r3, [r2, r3]
 8000af8:	68fa      	ldr	r2, [r7, #12]
 8000afa:	43d2      	mvns	r2, r2
 8000afc:	401a      	ands	r2, r3
 8000afe:	0011      	movs	r1, r2
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	2385      	movs	r3, #133	; 0x85
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	50d1      	str	r1, [r2, r3]
 8000b08:	e00a      	b.n	8000b20 <HAL_CAN_ConfigFilter+0x194>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000b0a:	697a      	ldr	r2, [r7, #20]
 8000b0c:	2385      	movs	r3, #133	; 0x85
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	58d2      	ldr	r2, [r2, r3]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	431a      	orrs	r2, r3
 8000b16:	0011      	movs	r1, r2
 8000b18:	697a      	ldr	r2, [r7, #20]
 8000b1a:	2385      	movs	r3, #133	; 0x85
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	50d1      	str	r1, [r2, r3]
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	6a1b      	ldr	r3, [r3, #32]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d10a      	bne.n	8000b3e <HAL_CAN_ConfigFilter+0x1b2>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	2387      	movs	r3, #135	; 0x87
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	58d2      	ldr	r2, [r2, r3]
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	431a      	orrs	r2, r3
 8000b34:	0011      	movs	r1, r2
 8000b36:	697a      	ldr	r2, [r7, #20]
 8000b38:	2387      	movs	r3, #135	; 0x87
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	50d1      	str	r1, [r2, r3]
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000b3e:	697a      	ldr	r2, [r7, #20]
 8000b40:	2380      	movs	r3, #128	; 0x80
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	58d3      	ldr	r3, [r2, r3]
 8000b46:	2201      	movs	r2, #1
 8000b48:	4393      	bics	r3, r2
 8000b4a:	0019      	movs	r1, r3
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	50d1      	str	r1, [r2, r3]

    /* Return function status */
    return HAL_OK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	e007      	b.n	8000b68 <HAL_CAN_ConfigFilter+0x1dc>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b5c:	2280      	movs	r2, #128	; 0x80
 8000b5e:	02d2      	lsls	r2, r2, #11
 8000b60:	431a      	orrs	r2, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
  }
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b006      	add	sp, #24
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	2220      	movs	r2, #32
 8000b7c:	5c9b      	ldrb	r3, [r3, r2]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	d12f      	bne.n	8000be4 <HAL_CAN_Start+0x74>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2220      	movs	r2, #32
 8000b88:	2102      	movs	r1, #2
 8000b8a:	5499      	strb	r1, [r3, r2]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2101      	movs	r1, #1
 8000b98:	438a      	bics	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000b9c:	f7ff fdee 	bl	800077c <HAL_GetTick>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	60fb      	str	r3, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000ba4:	e013      	b.n	8000bce <HAL_CAN_Start+0x5e>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000ba6:	f7ff fde9 	bl	800077c <HAL_GetTick>
 8000baa:	0002      	movs	r2, r0
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	1ad3      	subs	r3, r2, r3
 8000bb0:	2b0a      	cmp	r3, #10
 8000bb2:	d90c      	bls.n	8000bce <HAL_CAN_Start+0x5e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bb8:	2280      	movs	r2, #128	; 0x80
 8000bba:	0292      	lsls	r2, r2, #10
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2220      	movs	r2, #32
 8000bc6:	2105      	movs	r1, #5
 8000bc8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e012      	b.n	8000bf4 <HAL_CAN_Start+0x84>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4013      	ands	r3, r2
 8000bd8:	d1e5      	bne.n	8000ba6 <HAL_CAN_Start+0x36>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000be0:	2300      	movs	r3, #0
 8000be2:	e007      	b.n	8000bf4 <HAL_CAN_Start+0x84>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be8:	2280      	movs	r2, #128	; 0x80
 8000bea:	0312      	lsls	r2, r2, #12
 8000bec:	431a      	orrs	r2, r3
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000bf2:	2301      	movs	r3, #1
  }
}
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	b004      	add	sp, #16
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	60f8      	str	r0, [r7, #12]
 8000c04:	60b9      	str	r1, [r7, #8]
 8000c06:	607a      	str	r2, [r7, #4]
 8000c08:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000c0a:	201f      	movs	r0, #31
 8000c0c:	183b      	adds	r3, r7, r0
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	2120      	movs	r1, #32
 8000c12:	5c52      	ldrb	r2, [r2, r1]
 8000c14:	701a      	strb	r2, [r3, #0]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	689b      	ldr	r3, [r3, #8]
 8000c1c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000c1e:	183b      	adds	r3, r7, r0
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d004      	beq.n	8000c30 <HAL_CAN_AddTxMessage+0x34>
 8000c26:	183b      	adds	r3, r7, r0
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b02      	cmp	r3, #2
 8000c2c:	d000      	beq.n	8000c30 <HAL_CAN_AddTxMessage+0x34>
 8000c2e:	e0ab      	b.n	8000d88 <HAL_CAN_AddTxMessage+0x18c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	2380      	movs	r3, #128	; 0x80
 8000c34:	04db      	lsls	r3, r3, #19
 8000c36:	4013      	ands	r3, r2
 8000c38:	d10a      	bne.n	8000c50 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c3a:	69ba      	ldr	r2, [r7, #24]
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	051b      	lsls	r3, r3, #20
 8000c40:	4013      	ands	r3, r2
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000c42:	d105      	bne.n	8000c50 <HAL_CAN_AddTxMessage+0x54>
        ((tsr & CAN_TSR_TME2) != 0U))
 8000c44:	69ba      	ldr	r2, [r7, #24]
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	055b      	lsls	r3, r3, #21
 8000c4a:	4013      	ands	r3, r2
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000c4c:	d100      	bne.n	8000c50 <HAL_CAN_AddTxMessage+0x54>
 8000c4e:	e092      	b.n	8000d76 <HAL_CAN_AddTxMessage+0x17a>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	0e1b      	lsrs	r3, r3, #24
 8000c54:	2203      	movs	r2, #3
 8000c56:	4013      	ands	r3, r2
 8000c58:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	409a      	lsls	r2, r3
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d10c      	bne.n	8000c86 <HAL_CAN_AddTxMessage+0x8a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	0559      	lsls	r1, r3, #21
                                                           pHeader->RTR);
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4311      	orrs	r1, r2
 8000c7c:	697a      	ldr	r2, [r7, #20]
 8000c7e:	3218      	adds	r2, #24
 8000c80:	0112      	lsls	r2, r2, #4
 8000c82:	50d1      	str	r1, [r2, r3]
 8000c84:	e00f      	b.n	8000ca6 <HAL_CAN_AddTxMessage+0xaa>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c86:	68bb      	ldr	r3, [r7, #8]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c90:	431a      	orrs	r2, r3
 8000c92:	0011      	movs	r1, r2
                                                           pHeader->RTR);
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	68da      	ldr	r2, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	681b      	ldr	r3, [r3, #0]
                                                           pHeader->IDE |
 8000c9c:	4311      	orrs	r1, r2
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000c9e:	697a      	ldr	r2, [r7, #20]
 8000ca0:	3218      	adds	r2, #24
 8000ca2:	0112      	lsls	r2, r2, #4
 8000ca4:	50d1      	str	r1, [r2, r3]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	6819      	ldr	r1, [r3, #0]
 8000caa:	68bb      	ldr	r3, [r7, #8]
 8000cac:	691a      	ldr	r2, [r3, #16]
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	3318      	adds	r3, #24
 8000cb2:	011b      	lsls	r3, r3, #4
 8000cb4:	18cb      	adds	r3, r1, r3
 8000cb6:	3304      	adds	r3, #4
 8000cb8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	7d1b      	ldrb	r3, [r3, #20]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d112      	bne.n	8000ce8 <HAL_CAN_AddTxMessage+0xec>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	3318      	adds	r3, #24
 8000cca:	011b      	lsls	r3, r3, #4
 8000ccc:	18d3      	adds	r3, r2, r3
 8000cce:	3304      	adds	r3, #4
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	6819      	ldr	r1, [r3, #0]
 8000cd6:	2380      	movs	r3, #128	; 0x80
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	3318      	adds	r3, #24
 8000ce0:	011b      	lsls	r3, r3, #4
 8000ce2:	18cb      	adds	r3, r1, r3
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3307      	adds	r3, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	061a      	lsls	r2, r3, #24
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3306      	adds	r3, #6
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	041b      	lsls	r3, r3, #16
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3305      	adds	r3, #5
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	021b      	lsls	r3, r3, #8
 8000d02:	431a      	orrs	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3304      	adds	r3, #4
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	0019      	movs	r1, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	430a      	orrs	r2, r1
 8000d12:	6979      	ldr	r1, [r7, #20]
 8000d14:	23c6      	movs	r3, #198	; 0xc6
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	0109      	lsls	r1, r1, #4
 8000d1a:	1841      	adds	r1, r0, r1
 8000d1c:	18cb      	adds	r3, r1, r3
 8000d1e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3303      	adds	r3, #3
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	061a      	lsls	r2, r3, #24
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	041b      	lsls	r3, r3, #16
 8000d30:	431a      	orrs	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3301      	adds	r3, #1
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	021b      	lsls	r3, r3, #8
 8000d3a:	431a      	orrs	r2, r3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	0019      	movs	r1, r3
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	6818      	ldr	r0, [r3, #0]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	6979      	ldr	r1, [r7, #20]
 8000d4a:	23c4      	movs	r3, #196	; 0xc4
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	0109      	lsls	r1, r1, #4
 8000d50:	1841      	adds	r1, r0, r1
 8000d52:	18cb      	adds	r3, r1, r3
 8000d54:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	3218      	adds	r2, #24
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	58d2      	ldr	r2, [r2, r3]
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2101      	movs	r1, #1
 8000d68:	4311      	orrs	r1, r2
 8000d6a:	697a      	ldr	r2, [r7, #20]
 8000d6c:	3218      	adds	r2, #24
 8000d6e:	0112      	lsls	r2, r2, #4
 8000d70:	50d1      	str	r1, [r2, r3]

      /* Return function status */
      return HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	e010      	b.n	8000d98 <HAL_CAN_AddTxMessage+0x19c>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d7a:	2280      	movs	r2, #128	; 0x80
 8000d7c:	0392      	lsls	r2, r2, #14
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	e007      	b.n	8000d98 <HAL_CAN_AddTxMessage+0x19c>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	02d2      	lsls	r2, r2, #11
 8000d90:	431a      	orrs	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
  }
}
 8000d98:	0018      	movs	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b008      	add	sp, #32
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
 8000dac:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000dae:	2017      	movs	r0, #23
 8000db0:	183b      	adds	r3, r7, r0
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	2120      	movs	r1, #32
 8000db6:	5c52      	ldrb	r2, [r2, r1]
 8000db8:	701a      	strb	r2, [r3, #0]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dba:	0002      	movs	r2, r0
 8000dbc:	18bb      	adds	r3, r7, r2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d004      	beq.n	8000dce <HAL_CAN_GetRxMessage+0x2e>
 8000dc4:	18bb      	adds	r3, r7, r2
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b02      	cmp	r3, #2
 8000dca:	d000      	beq.n	8000dce <HAL_CAN_GetRxMessage+0x2e>
 8000dcc:	e107      	b.n	8000fde <HAL_CAN_GetRxMessage+0x23e>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d10e      	bne.n	8000df2 <HAL_CAN_GetRxMessage+0x52>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	2203      	movs	r2, #3
 8000ddc:	4013      	ands	r3, r2
 8000dde:	d117      	bne.n	8000e10 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	0392      	lsls	r2, r2, #14
 8000de8:	431a      	orrs	r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e0fd      	b.n	8000fee <HAL_CAN_GetRxMessage+0x24e>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	2203      	movs	r2, #3
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	d108      	bne.n	8000e10 <HAL_CAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	0392      	lsls	r2, r2, #14
 8000e06:	431a      	orrs	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	e0ee      	b.n	8000fee <HAL_CAN_GetRxMessage+0x24e>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	68ba      	ldr	r2, [r7, #8]
 8000e16:	321b      	adds	r2, #27
 8000e18:	0112      	lsls	r2, r2, #4
 8000e1a:	58d3      	ldr	r3, [r2, r3]
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	401a      	ands	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d10b      	bne.n	8000e44 <HAL_CAN_GetRxMessage+0xa4>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	68ba      	ldr	r2, [r7, #8]
 8000e32:	321b      	adds	r2, #27
 8000e34:	0112      	lsls	r2, r2, #4
 8000e36:	58d3      	ldr	r3, [r2, r3]
 8000e38:	0d5b      	lsrs	r3, r3, #21
 8000e3a:	055b      	lsls	r3, r3, #21
 8000e3c:	0d5a      	lsrs	r2, r3, #21
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	601a      	str	r2, [r3, #0]
 8000e42:	e00a      	b.n	8000e5a <HAL_CAN_GetRxMessage+0xba>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68ba      	ldr	r2, [r7, #8]
 8000e4a:	321b      	adds	r2, #27
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	58d3      	ldr	r3, [r2, r3]
 8000e50:	08db      	lsrs	r3, r3, #3
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	08da      	lsrs	r2, r3, #3
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68ba      	ldr	r2, [r7, #8]
 8000e60:	321b      	adds	r2, #27
 8000e62:	0112      	lsls	r2, r2, #4
 8000e64:	58d3      	ldr	r3, [r2, r3]
 8000e66:	2202      	movs	r2, #2
 8000e68:	401a      	ands	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	331b      	adds	r3, #27
 8000e76:	011b      	lsls	r3, r3, #4
 8000e78:	18d3      	adds	r3, r2, r3
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2208      	movs	r2, #8
 8000e80:	4013      	ands	r3, r2
 8000e82:	d003      	beq.n	8000e8c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2208      	movs	r2, #8
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	e00b      	b.n	8000ea4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	331b      	adds	r3, #27
 8000e94:	011b      	lsls	r3, r3, #4
 8000e96:	18d3      	adds	r3, r2, r3
 8000e98:	3304      	adds	r3, #4
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	220f      	movs	r2, #15
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	331b      	adds	r3, #27
 8000eac:	011b      	lsls	r3, r3, #4
 8000eae:	18d3      	adds	r3, r2, r3
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	0a1b      	lsrs	r3, r3, #8
 8000eb6:	22ff      	movs	r2, #255	; 0xff
 8000eb8:	401a      	ands	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	331b      	adds	r3, #27
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	18d3      	adds	r3, r2, r3
 8000eca:	3304      	adds	r3, #4
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	0c1b      	lsrs	r3, r3, #16
 8000ed0:	041b      	lsls	r3, r3, #16
 8000ed2:	0c1a      	lsrs	r2, r3, #16
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	6819      	ldr	r1, [r3, #0]
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	23dc      	movs	r3, #220	; 0xdc
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	188a      	adds	r2, r1, r2
 8000ee6:	18d3      	adds	r3, r2, r3
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	6819      	ldr	r1, [r3, #0]
 8000ef4:	68ba      	ldr	r2, [r7, #8]
 8000ef6:	23dc      	movs	r3, #220	; 0xdc
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	0112      	lsls	r2, r2, #4
 8000efc:	188a      	adds	r2, r1, r2
 8000efe:	18d3      	adds	r3, r2, r3
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	0a1a      	lsrs	r2, r3, #8
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	3301      	adds	r3, #1
 8000f08:	b2d2      	uxtb	r2, r2
 8000f0a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6819      	ldr	r1, [r3, #0]
 8000f10:	68ba      	ldr	r2, [r7, #8]
 8000f12:	23dc      	movs	r3, #220	; 0xdc
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	0112      	lsls	r2, r2, #4
 8000f18:	188a      	adds	r2, r1, r2
 8000f1a:	18d3      	adds	r3, r2, r3
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	0c1a      	lsrs	r2, r3, #16
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	3302      	adds	r3, #2
 8000f24:	b2d2      	uxtb	r2, r2
 8000f26:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	6819      	ldr	r1, [r3, #0]
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	23dc      	movs	r3, #220	; 0xdc
 8000f30:	005b      	lsls	r3, r3, #1
 8000f32:	0112      	lsls	r2, r2, #4
 8000f34:	188a      	adds	r2, r1, r2
 8000f36:	18d3      	adds	r3, r2, r3
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	0e1a      	lsrs	r2, r3, #24
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	3303      	adds	r3, #3
 8000f40:	b2d2      	uxtb	r2, r2
 8000f42:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	6819      	ldr	r1, [r3, #0]
 8000f48:	68ba      	ldr	r2, [r7, #8]
 8000f4a:	23de      	movs	r3, #222	; 0xde
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	0112      	lsls	r2, r2, #4
 8000f50:	188a      	adds	r2, r1, r2
 8000f52:	18d3      	adds	r3, r2, r3
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	b2d2      	uxtb	r2, r2
 8000f5c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6819      	ldr	r1, [r3, #0]
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	23de      	movs	r3, #222	; 0xde
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	0112      	lsls	r2, r2, #4
 8000f6a:	188a      	adds	r2, r1, r2
 8000f6c:	18d3      	adds	r3, r2, r3
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	0a1a      	lsrs	r2, r3, #8
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	3305      	adds	r3, #5
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	6819      	ldr	r1, [r3, #0]
 8000f7e:	68ba      	ldr	r2, [r7, #8]
 8000f80:	23de      	movs	r3, #222	; 0xde
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	0112      	lsls	r2, r2, #4
 8000f86:	188a      	adds	r2, r1, r2
 8000f88:	18d3      	adds	r3, r2, r3
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	0c1a      	lsrs	r2, r3, #16
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	3306      	adds	r3, #6
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	6819      	ldr	r1, [r3, #0]
 8000f9a:	68ba      	ldr	r2, [r7, #8]
 8000f9c:	23de      	movs	r3, #222	; 0xde
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	0112      	lsls	r2, r2, #4
 8000fa2:	188a      	adds	r2, r1, r2
 8000fa4:	18d3      	adds	r3, r2, r3
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	0e1a      	lsrs	r2, r3, #24
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	3307      	adds	r3, #7
 8000fae:	b2d2      	uxtb	r2, r2
 8000fb0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000fb2:	68bb      	ldr	r3, [r7, #8]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d108      	bne.n	8000fca <HAL_CAN_GetRxMessage+0x22a>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	2120      	movs	r1, #32
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	e007      	b.n	8000fda <HAL_CAN_GetRxMessage+0x23a>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	691a      	ldr	r2, [r3, #16]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	e007      	b.n	8000fee <HAL_CAN_GetRxMessage+0x24e>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe2:	2280      	movs	r2, #128	; 0x80
 8000fe4:	02d2      	lsls	r2, r2, #11
 8000fe6:	431a      	orrs	r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
  }
}
 8000fee:	0018      	movs	r0, r3
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	b006      	add	sp, #24
 8000ff4:	bd80      	pop	{r7, pc}

08000ff6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001000:	200f      	movs	r0, #15
 8001002:	183b      	adds	r3, r7, r0
 8001004:	687a      	ldr	r2, [r7, #4]
 8001006:	2120      	movs	r1, #32
 8001008:	5c52      	ldrb	r2, [r2, r1]
 800100a:	701a      	strb	r2, [r3, #0]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800100c:	0002      	movs	r2, r0
 800100e:	18bb      	adds	r3, r7, r2
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	2b01      	cmp	r3, #1
 8001014:	d003      	beq.n	800101e <HAL_CAN_ActivateNotification+0x28>
 8001016:	18bb      	adds	r3, r7, r2
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d109      	bne.n	8001032 <HAL_CAN_ActivateNotification+0x3c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	6959      	ldr	r1, [r3, #20]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	430a      	orrs	r2, r1
 800102c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800102e:	2300      	movs	r3, #0
 8001030:	e007      	b.n	8001042 <HAL_CAN_ActivateNotification+0x4c>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001036:	2280      	movs	r2, #128	; 0x80
 8001038:	02d2      	lsls	r2, r2, #11
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
  }
}
 8001042:	0018      	movs	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	b004      	add	sp, #16
 8001048:	bd80      	pop	{r7, pc}

0800104a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800104a:	b580      	push	{r7, lr}
 800104c:	b08a      	sub	sp, #40	; 0x28
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001052:	2300      	movs	r3, #0
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	695b      	ldr	r3, [r3, #20]
 800105c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	691b      	ldr	r3, [r3, #16]
 800107c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	2201      	movs	r2, #1
 800108a:	4013      	ands	r3, r2
 800108c:	d100      	bne.n	8001090 <HAL_CAN_IRQHandler+0x46>
 800108e:	e084      	b.n	800119a <HAL_CAN_IRQHandler+0x150>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	2201      	movs	r2, #1
 8001094:	4013      	ands	r3, r2
 8001096:	d024      	beq.n	80010e2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2201      	movs	r2, #1
 800109e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80010a0:	69bb      	ldr	r3, [r7, #24]
 80010a2:	2202      	movs	r2, #2
 80010a4:	4013      	ands	r3, r2
 80010a6:	d004      	beq.n	80010b2 <HAL_CAN_IRQHandler+0x68>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	0018      	movs	r0, r3
 80010ac:	f000 f981 	bl	80013b2 <HAL_CAN_TxMailbox0CompleteCallback>
 80010b0:	e017      	b.n	80010e2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	2204      	movs	r2, #4
 80010b6:	4013      	ands	r3, r2
 80010b8:	d005      	beq.n	80010c6 <HAL_CAN_IRQHandler+0x7c>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	2280      	movs	r2, #128	; 0x80
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	4313      	orrs	r3, r2
 80010c2:	627b      	str	r3, [r7, #36]	; 0x24
 80010c4:	e00d      	b.n	80010e2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	2208      	movs	r2, #8
 80010ca:	4013      	ands	r3, r2
 80010cc:	d005      	beq.n	80010da <HAL_CAN_IRQHandler+0x90>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80010ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d0:	2280      	movs	r2, #128	; 0x80
 80010d2:	0152      	lsls	r2, r2, #5
 80010d4:	4313      	orrs	r3, r2
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
 80010d8:	e003      	b.n	80010e2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 f980 	bl	80013e2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	2380      	movs	r3, #128	; 0x80
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	4013      	ands	r3, r2
 80010ea:	d028      	beq.n	800113e <HAL_CAN_IRQHandler+0xf4>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2280      	movs	r2, #128	; 0x80
 80010f2:	0052      	lsls	r2, r2, #1
 80010f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	4013      	ands	r3, r2
 80010fe:	d004      	beq.n	800110a <HAL_CAN_IRQHandler+0xc0>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	0018      	movs	r0, r3
 8001104:	f000 f95d 	bl	80013c2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001108:	e019      	b.n	800113e <HAL_CAN_IRQHandler+0xf4>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	2380      	movs	r3, #128	; 0x80
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	4013      	ands	r3, r2
 8001112:	d005      	beq.n	8001120 <HAL_CAN_IRQHandler+0xd6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	0192      	lsls	r2, r2, #6
 800111a:	4313      	orrs	r3, r2
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
 800111e:	e00e      	b.n	800113e <HAL_CAN_IRQHandler+0xf4>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	2380      	movs	r3, #128	; 0x80
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	4013      	ands	r3, r2
 8001128:	d005      	beq.n	8001136 <HAL_CAN_IRQHandler+0xec>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800112a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800112c:	2280      	movs	r2, #128	; 0x80
 800112e:	01d2      	lsls	r2, r2, #7
 8001130:	4313      	orrs	r3, r2
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
 8001134:	e003      	b.n	800113e <HAL_CAN_IRQHandler+0xf4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	0018      	movs	r0, r3
 800113a:	f000 f95a 	bl	80013f2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	025b      	lsls	r3, r3, #9
 8001144:	4013      	ands	r3, r2
 8001146:	d028      	beq.n	800119a <HAL_CAN_IRQHandler+0x150>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2280      	movs	r2, #128	; 0x80
 800114e:	0252      	lsls	r2, r2, #9
 8001150:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	029b      	lsls	r3, r3, #10
 8001158:	4013      	ands	r3, r2
 800115a:	d004      	beq.n	8001166 <HAL_CAN_IRQHandler+0x11c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	0018      	movs	r0, r3
 8001160:	f000 f937 	bl	80013d2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001164:	e019      	b.n	800119a <HAL_CAN_IRQHandler+0x150>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	2380      	movs	r3, #128	; 0x80
 800116a:	02db      	lsls	r3, r3, #11
 800116c:	4013      	ands	r3, r2
 800116e:	d005      	beq.n	800117c <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	2280      	movs	r2, #128	; 0x80
 8001174:	0212      	lsls	r2, r2, #8
 8001176:	4313      	orrs	r3, r2
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
 800117a:	e00e      	b.n	800119a <HAL_CAN_IRQHandler+0x150>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	2380      	movs	r3, #128	; 0x80
 8001180:	031b      	lsls	r3, r3, #12
 8001182:	4013      	ands	r3, r2
 8001184:	d005      	beq.n	8001192 <HAL_CAN_IRQHandler+0x148>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	2280      	movs	r2, #128	; 0x80
 800118a:	0252      	lsls	r2, r2, #9
 800118c:	4313      	orrs	r3, r2
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
 8001190:	e003      	b.n	800119a <HAL_CAN_IRQHandler+0x150>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	0018      	movs	r0, r3
 8001196:	f000 f934 	bl	8001402 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800119a:	6a3b      	ldr	r3, [r7, #32]
 800119c:	2208      	movs	r2, #8
 800119e:	4013      	ands	r3, r2
 80011a0:	d00c      	beq.n	80011bc <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	2210      	movs	r2, #16
 80011a6:	4013      	ands	r3, r2
 80011a8:	d008      	beq.n	80011bc <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80011aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ac:	2280      	movs	r2, #128	; 0x80
 80011ae:	0092      	lsls	r2, r2, #2
 80011b0:	4313      	orrs	r3, r2
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2210      	movs	r2, #16
 80011ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80011bc:	6a3b      	ldr	r3, [r7, #32]
 80011be:	2204      	movs	r2, #4
 80011c0:	4013      	ands	r3, r2
 80011c2:	d00b      	beq.n	80011dc <HAL_CAN_IRQHandler+0x192>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	2208      	movs	r2, #8
 80011c8:	4013      	ands	r3, r2
 80011ca:	d007      	beq.n	80011dc <HAL_CAN_IRQHandler+0x192>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2208      	movs	r2, #8
 80011d2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 f923 	bl	8001422 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80011dc:	6a3b      	ldr	r3, [r7, #32]
 80011de:	2202      	movs	r2, #2
 80011e0:	4013      	ands	r3, r2
 80011e2:	d009      	beq.n	80011f8 <HAL_CAN_IRQHandler+0x1ae>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2203      	movs	r2, #3
 80011ec:	4013      	ands	r3, r2
 80011ee:	d003      	beq.n	80011f8 <HAL_CAN_IRQHandler+0x1ae>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	0018      	movs	r0, r3
 80011f4:	f000 f90d 	bl	8001412 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80011f8:	6a3b      	ldr	r3, [r7, #32]
 80011fa:	2240      	movs	r2, #64	; 0x40
 80011fc:	4013      	ands	r3, r2
 80011fe:	d00c      	beq.n	800121a <HAL_CAN_IRQHandler+0x1d0>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	2210      	movs	r2, #16
 8001204:	4013      	ands	r3, r2
 8001206:	d008      	beq.n	800121a <HAL_CAN_IRQHandler+0x1d0>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120a:	2280      	movs	r2, #128	; 0x80
 800120c:	00d2      	lsls	r2, r2, #3
 800120e:	4313      	orrs	r3, r2
 8001210:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2210      	movs	r2, #16
 8001218:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	2220      	movs	r2, #32
 800121e:	4013      	ands	r3, r2
 8001220:	d00b      	beq.n	800123a <HAL_CAN_IRQHandler+0x1f0>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	2208      	movs	r2, #8
 8001226:	4013      	ands	r3, r2
 8001228:	d007      	beq.n	800123a <HAL_CAN_IRQHandler+0x1f0>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2208      	movs	r2, #8
 8001230:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	0018      	movs	r0, r3
 8001236:	f000 f8fc 	bl	8001432 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	2210      	movs	r2, #16
 800123e:	4013      	ands	r3, r2
 8001240:	d009      	beq.n	8001256 <HAL_CAN_IRQHandler+0x20c>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	691b      	ldr	r3, [r3, #16]
 8001248:	2203      	movs	r2, #3
 800124a:	4013      	ands	r3, r2
 800124c:	d003      	beq.n	8001256 <HAL_CAN_IRQHandler+0x20c>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff f811 	bl	8000278 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001256:	6a3a      	ldr	r2, [r7, #32]
 8001258:	2380      	movs	r3, #128	; 0x80
 800125a:	029b      	lsls	r3, r3, #10
 800125c:	4013      	ands	r3, r2
 800125e:	d00b      	beq.n	8001278 <HAL_CAN_IRQHandler+0x22e>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	2210      	movs	r2, #16
 8001264:	4013      	ands	r3, r2
 8001266:	d007      	beq.n	8001278 <HAL_CAN_IRQHandler+0x22e>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2210      	movs	r2, #16
 800126e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	0018      	movs	r0, r3
 8001274:	f000 f8e5 	bl	8001442 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001278:	6a3a      	ldr	r2, [r7, #32]
 800127a:	2380      	movs	r3, #128	; 0x80
 800127c:	025b      	lsls	r3, r3, #9
 800127e:	4013      	ands	r3, r2
 8001280:	d00b      	beq.n	800129a <HAL_CAN_IRQHandler+0x250>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	2208      	movs	r2, #8
 8001286:	4013      	ands	r3, r2
 8001288:	d007      	beq.n	800129a <HAL_CAN_IRQHandler+0x250>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2208      	movs	r2, #8
 8001290:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	0018      	movs	r0, r3
 8001296:	f000 f8dc 	bl	8001452 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800129a:	6a3a      	ldr	r2, [r7, #32]
 800129c:	2380      	movs	r3, #128	; 0x80
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	4013      	ands	r3, r2
 80012a2:	d100      	bne.n	80012a6 <HAL_CAN_IRQHandler+0x25c>
 80012a4:	e074      	b.n	8001390 <HAL_CAN_IRQHandler+0x346>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	2204      	movs	r2, #4
 80012aa:	4013      	ands	r3, r2
 80012ac:	d100      	bne.n	80012b0 <HAL_CAN_IRQHandler+0x266>
 80012ae:	e06b      	b.n	8001388 <HAL_CAN_IRQHandler+0x33e>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012b0:	6a3a      	ldr	r2, [r7, #32]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	4013      	ands	r3, r2
 80012b8:	d007      	beq.n	80012ca <HAL_CAN_IRQHandler+0x280>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2201      	movs	r2, #1
 80012be:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80012c0:	d003      	beq.n	80012ca <HAL_CAN_IRQHandler+0x280>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80012c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c4:	2201      	movs	r2, #1
 80012c6:	4313      	orrs	r3, r2
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012ca:	6a3a      	ldr	r2, [r7, #32]
 80012cc:	2380      	movs	r3, #128	; 0x80
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4013      	ands	r3, r2
 80012d2:	d007      	beq.n	80012e4 <HAL_CAN_IRQHandler+0x29a>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2202      	movs	r2, #2
 80012d8:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80012da:	d003      	beq.n	80012e4 <HAL_CAN_IRQHandler+0x29a>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80012dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012de:	2202      	movs	r2, #2
 80012e0:	4313      	orrs	r3, r2
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012e4:	6a3a      	ldr	r2, [r7, #32]
 80012e6:	2380      	movs	r3, #128	; 0x80
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	4013      	ands	r3, r2
 80012ec:	d007      	beq.n	80012fe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2204      	movs	r2, #4
 80012f2:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80012f4:	d003      	beq.n	80012fe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80012f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f8:	2204      	movs	r2, #4
 80012fa:	4313      	orrs	r3, r2
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80012fe:	6a3a      	ldr	r2, [r7, #32]
 8001300:	2380      	movs	r3, #128	; 0x80
 8001302:	011b      	lsls	r3, r3, #4
 8001304:	4013      	ands	r3, r2
 8001306:	d03f      	beq.n	8001388 <HAL_CAN_IRQHandler+0x33e>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	2270      	movs	r2, #112	; 0x70
 800130c:	4013      	ands	r3, r2
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800130e:	d03b      	beq.n	8001388 <HAL_CAN_IRQHandler+0x33e>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2270      	movs	r2, #112	; 0x70
 8001314:	4013      	ands	r3, r2
 8001316:	2b60      	cmp	r3, #96	; 0x60
 8001318:	d027      	beq.n	800136a <HAL_CAN_IRQHandler+0x320>
 800131a:	d82c      	bhi.n	8001376 <HAL_CAN_IRQHandler+0x32c>
 800131c:	2b50      	cmp	r3, #80	; 0x50
 800131e:	d01f      	beq.n	8001360 <HAL_CAN_IRQHandler+0x316>
 8001320:	d829      	bhi.n	8001376 <HAL_CAN_IRQHandler+0x32c>
 8001322:	2b40      	cmp	r3, #64	; 0x40
 8001324:	d017      	beq.n	8001356 <HAL_CAN_IRQHandler+0x30c>
 8001326:	d826      	bhi.n	8001376 <HAL_CAN_IRQHandler+0x32c>
 8001328:	2b30      	cmp	r3, #48	; 0x30
 800132a:	d00f      	beq.n	800134c <HAL_CAN_IRQHandler+0x302>
 800132c:	d823      	bhi.n	8001376 <HAL_CAN_IRQHandler+0x32c>
 800132e:	2b10      	cmp	r3, #16
 8001330:	d002      	beq.n	8001338 <HAL_CAN_IRQHandler+0x2ee>
 8001332:	2b20      	cmp	r3, #32
 8001334:	d005      	beq.n	8001342 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001336:	e01e      	b.n	8001376 <HAL_CAN_IRQHandler+0x32c>
            errorcode |= HAL_CAN_ERROR_STF;
 8001338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133a:	2208      	movs	r2, #8
 800133c:	4313      	orrs	r3, r2
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001340:	e01a      	b.n	8001378 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	2210      	movs	r2, #16
 8001346:	4313      	orrs	r3, r2
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800134a:	e015      	b.n	8001378 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_ACK;
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	2220      	movs	r2, #32
 8001350:	4313      	orrs	r3, r2
 8001352:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001354:	e010      	b.n	8001378 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BR;
 8001356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001358:	2240      	movs	r2, #64	; 0x40
 800135a:	4313      	orrs	r3, r2
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800135e:	e00b      	b.n	8001378 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_BD;
 8001360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	4313      	orrs	r3, r2
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001368:	e006      	b.n	8001378 <HAL_CAN_IRQHandler+0x32e>
            errorcode |= HAL_CAN_ERROR_CRC;
 800136a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800136c:	2280      	movs	r2, #128	; 0x80
 800136e:	0052      	lsls	r2, r2, #1
 8001370:	4313      	orrs	r3, r2
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001374:	e000      	b.n	8001378 <HAL_CAN_IRQHandler+0x32e>
            break;
 8001376:	46c0      	nop			; (mov r8, r8)
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	699a      	ldr	r2, [r3, #24]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	2170      	movs	r1, #112	; 0x70
 8001384:	438a      	bics	r2, r1
 8001386:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2204      	movs	r2, #4
 800138e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001392:	2b00      	cmp	r3, #0
 8001394:	d009      	beq.n	80013aa <HAL_CAN_IRQHandler+0x360>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	431a      	orrs	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f000 f85c 	bl	8001462 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	46bd      	mov	sp, r7
 80013ae:	b00a      	add	sp, #40	; 0x28
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b082      	sub	sp, #8
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46bd      	mov	sp, r7
 80013be:	b002      	add	sp, #8
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	46bd      	mov	sp, r7
 80013ce:	b002      	add	sp, #8
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	46bd      	mov	sp, r7
 80013de:	b002      	add	sp, #8
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	b002      	add	sp, #8
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b002      	add	sp, #8
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b082      	sub	sp, #8
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b002      	add	sp, #8
 8001410:	bd80      	pop	{r7, pc}

08001412 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800141a:	46c0      	nop			; (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b002      	add	sp, #8
 8001420:	bd80      	pop	{r7, pc}

08001422 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b002      	add	sp, #8
 8001430:	bd80      	pop	{r7, pc}

08001432 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	46bd      	mov	sp, r7
 800143e:	b002      	add	sp, #8
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800144a:	46c0      	nop			; (mov r8, r8)
 800144c:	46bd      	mov	sp, r7
 800144e:	b002      	add	sp, #8
 8001450:	bd80      	pop	{r7, pc}

08001452 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	b082      	sub	sp, #8
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800145a:	46c0      	nop			; (mov r8, r8)
 800145c:	46bd      	mov	sp, r7
 800145e:	b002      	add	sp, #8
 8001460:	bd80      	pop	{r7, pc}

08001462 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800146a:	46c0      	nop			; (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b002      	add	sp, #8
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	0002      	movs	r2, r0
 800147c:	1dfb      	adds	r3, r7, #7
 800147e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001480:	1dfb      	adds	r3, r7, #7
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b7f      	cmp	r3, #127	; 0x7f
 8001486:	d809      	bhi.n	800149c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001488:	1dfb      	adds	r3, r7, #7
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	001a      	movs	r2, r3
 800148e:	231f      	movs	r3, #31
 8001490:	401a      	ands	r2, r3
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <__NVIC_EnableIRQ+0x30>)
 8001494:	2101      	movs	r1, #1
 8001496:	4091      	lsls	r1, r2
 8001498:	000a      	movs	r2, r1
 800149a:	601a      	str	r2, [r3, #0]
  }
}
 800149c:	46c0      	nop			; (mov r8, r8)
 800149e:	46bd      	mov	sp, r7
 80014a0:	b002      	add	sp, #8
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	0002      	movs	r2, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b7f      	cmp	r3, #127	; 0x7f
 80014bc:	d828      	bhi.n	8001510 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014be:	4a2f      	ldr	r2, [pc, #188]	; (800157c <__NVIC_SetPriority+0xd4>)
 80014c0:	1dfb      	adds	r3, r7, #7
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	089b      	lsrs	r3, r3, #2
 80014c8:	33c0      	adds	r3, #192	; 0xc0
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	589b      	ldr	r3, [r3, r2]
 80014ce:	1dfa      	adds	r2, r7, #7
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	0011      	movs	r1, r2
 80014d4:	2203      	movs	r2, #3
 80014d6:	400a      	ands	r2, r1
 80014d8:	00d2      	lsls	r2, r2, #3
 80014da:	21ff      	movs	r1, #255	; 0xff
 80014dc:	4091      	lsls	r1, r2
 80014de:	000a      	movs	r2, r1
 80014e0:	43d2      	mvns	r2, r2
 80014e2:	401a      	ands	r2, r3
 80014e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	22ff      	movs	r2, #255	; 0xff
 80014ec:	401a      	ands	r2, r3
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	0018      	movs	r0, r3
 80014f4:	2303      	movs	r3, #3
 80014f6:	4003      	ands	r3, r0
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014fc:	481f      	ldr	r0, [pc, #124]	; (800157c <__NVIC_SetPriority+0xd4>)
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	b25b      	sxtb	r3, r3
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	430a      	orrs	r2, r1
 8001508:	33c0      	adds	r3, #192	; 0xc0
 800150a:	009b      	lsls	r3, r3, #2
 800150c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800150e:	e031      	b.n	8001574 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001510:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <__NVIC_SetPriority+0xd8>)
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	0019      	movs	r1, r3
 8001518:	230f      	movs	r3, #15
 800151a:	400b      	ands	r3, r1
 800151c:	3b08      	subs	r3, #8
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	3306      	adds	r3, #6
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	18d3      	adds	r3, r2, r3
 8001526:	3304      	adds	r3, #4
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	1dfa      	adds	r2, r7, #7
 800152c:	7812      	ldrb	r2, [r2, #0]
 800152e:	0011      	movs	r1, r2
 8001530:	2203      	movs	r2, #3
 8001532:	400a      	ands	r2, r1
 8001534:	00d2      	lsls	r2, r2, #3
 8001536:	21ff      	movs	r1, #255	; 0xff
 8001538:	4091      	lsls	r1, r2
 800153a:	000a      	movs	r2, r1
 800153c:	43d2      	mvns	r2, r2
 800153e:	401a      	ands	r2, r3
 8001540:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	019b      	lsls	r3, r3, #6
 8001546:	22ff      	movs	r2, #255	; 0xff
 8001548:	401a      	ands	r2, r3
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	0018      	movs	r0, r3
 8001550:	2303      	movs	r3, #3
 8001552:	4003      	ands	r3, r0
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001558:	4809      	ldr	r0, [pc, #36]	; (8001580 <__NVIC_SetPriority+0xd8>)
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	001c      	movs	r4, r3
 8001560:	230f      	movs	r3, #15
 8001562:	4023      	ands	r3, r4
 8001564:	3b08      	subs	r3, #8
 8001566:	089b      	lsrs	r3, r3, #2
 8001568:	430a      	orrs	r2, r1
 800156a:	3306      	adds	r3, #6
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	18c3      	adds	r3, r0, r3
 8001570:	3304      	adds	r3, #4
 8001572:	601a      	str	r2, [r3, #0]
}
 8001574:	46c0      	nop			; (mov r8, r8)
 8001576:	46bd      	mov	sp, r7
 8001578:	b003      	add	sp, #12
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	e000e100 	.word	0xe000e100
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	1e5a      	subs	r2, r3, #1
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	045b      	lsls	r3, r3, #17
 8001594:	429a      	cmp	r2, r3
 8001596:	d301      	bcc.n	800159c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001598:	2301      	movs	r3, #1
 800159a:	e010      	b.n	80015be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800159c:	4b0a      	ldr	r3, [pc, #40]	; (80015c8 <SysTick_Config+0x44>)
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	3a01      	subs	r2, #1
 80015a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015a4:	2301      	movs	r3, #1
 80015a6:	425b      	negs	r3, r3
 80015a8:	2103      	movs	r1, #3
 80015aa:	0018      	movs	r0, r3
 80015ac:	f7ff ff7c 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b0:	4b05      	ldr	r3, [pc, #20]	; (80015c8 <SysTick_Config+0x44>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015b6:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <SysTick_Config+0x44>)
 80015b8:	2207      	movs	r2, #7
 80015ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015bc:	2300      	movs	r3, #0
}
 80015be:	0018      	movs	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b002      	add	sp, #8
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	e000e010 	.word	0xe000e010

080015cc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
 80015d6:	210f      	movs	r1, #15
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	1c02      	adds	r2, r0, #0
 80015dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	187b      	adds	r3, r7, r1
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	0011      	movs	r1, r2
 80015e8:	0018      	movs	r0, r3
 80015ea:	f7ff ff5d 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b004      	add	sp, #16
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b082      	sub	sp, #8
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	0002      	movs	r2, r0
 80015fe:	1dfb      	adds	r3, r7, #7
 8001600:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	b25b      	sxtb	r3, r3
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff ff33 	bl	8001474 <__NVIC_EnableIRQ>
}
 800160e:	46c0      	nop			; (mov r8, r8)
 8001610:	46bd      	mov	sp, r7
 8001612:	b002      	add	sp, #8
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b082      	sub	sp, #8
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	0018      	movs	r0, r3
 8001622:	f7ff ffaf 	bl	8001584 <SysTick_Config>
 8001626:	0003      	movs	r3, r0
}
 8001628:	0018      	movs	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	b002      	add	sp, #8
 800162e:	bd80      	pop	{r7, pc}

08001630 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b086      	sub	sp, #24
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163e:	e155      	b.n	80018ec <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2101      	movs	r1, #1
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	4091      	lsls	r1, r2
 800164a:	000a      	movs	r2, r1
 800164c:	4013      	ands	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d100      	bne.n	8001658 <HAL_GPIO_Init+0x28>
 8001656:	e146      	b.n	80018e6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	2203      	movs	r2, #3
 800165e:	4013      	ands	r3, r2
 8001660:	2b01      	cmp	r3, #1
 8001662:	d005      	beq.n	8001670 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2203      	movs	r2, #3
 800166a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800166c:	2b02      	cmp	r3, #2
 800166e:	d130      	bne.n	80016d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	409a      	lsls	r2, r3
 800167e:	0013      	movs	r3, r2
 8001680:	43da      	mvns	r2, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	409a      	lsls	r2, r3
 8001692:	0013      	movs	r3, r2
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016a6:	2201      	movs	r2, #1
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	409a      	lsls	r2, r3
 80016ac:	0013      	movs	r3, r2
 80016ae:	43da      	mvns	r2, r3
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4013      	ands	r3, r2
 80016b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	091b      	lsrs	r3, r3, #4
 80016bc:	2201      	movs	r2, #1
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
 80016c4:	0013      	movs	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2203      	movs	r2, #3
 80016d8:	4013      	ands	r3, r2
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d017      	beq.n	800170e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	2203      	movs	r2, #3
 80016ea:	409a      	lsls	r2, r3
 80016ec:	0013      	movs	r3, r2
 80016ee:	43da      	mvns	r2, r3
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4013      	ands	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	005b      	lsls	r3, r3, #1
 80016fe:	409a      	lsls	r2, r3
 8001700:	0013      	movs	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	2203      	movs	r2, #3
 8001714:	4013      	ands	r3, r2
 8001716:	2b02      	cmp	r3, #2
 8001718:	d123      	bne.n	8001762 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	08da      	lsrs	r2, r3, #3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3208      	adds	r2, #8
 8001722:	0092      	lsls	r2, r2, #2
 8001724:	58d3      	ldr	r3, [r2, r3]
 8001726:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	2207      	movs	r2, #7
 800172c:	4013      	ands	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	220f      	movs	r2, #15
 8001732:	409a      	lsls	r2, r3
 8001734:	0013      	movs	r3, r2
 8001736:	43da      	mvns	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	691a      	ldr	r2, [r3, #16]
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	2107      	movs	r1, #7
 8001746:	400b      	ands	r3, r1
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	409a      	lsls	r2, r3
 800174c:	0013      	movs	r3, r2
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	08da      	lsrs	r2, r3, #3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3208      	adds	r2, #8
 800175c:	0092      	lsls	r2, r2, #2
 800175e:	6939      	ldr	r1, [r7, #16]
 8001760:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	2203      	movs	r2, #3
 800176e:	409a      	lsls	r2, r3
 8001770:	0013      	movs	r3, r2
 8001772:	43da      	mvns	r2, r3
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4013      	ands	r3, r2
 8001778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2203      	movs	r2, #3
 8001780:	401a      	ands	r2, r3
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	409a      	lsls	r2, r3
 8001788:	0013      	movs	r3, r2
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4313      	orrs	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	693a      	ldr	r2, [r7, #16]
 8001794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	23c0      	movs	r3, #192	; 0xc0
 800179c:	029b      	lsls	r3, r3, #10
 800179e:	4013      	ands	r3, r2
 80017a0:	d100      	bne.n	80017a4 <HAL_GPIO_Init+0x174>
 80017a2:	e0a0      	b.n	80018e6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a4:	4b57      	ldr	r3, [pc, #348]	; (8001904 <HAL_GPIO_Init+0x2d4>)
 80017a6:	699a      	ldr	r2, [r3, #24]
 80017a8:	4b56      	ldr	r3, [pc, #344]	; (8001904 <HAL_GPIO_Init+0x2d4>)
 80017aa:	2101      	movs	r1, #1
 80017ac:	430a      	orrs	r2, r1
 80017ae:	619a      	str	r2, [r3, #24]
 80017b0:	4b54      	ldr	r3, [pc, #336]	; (8001904 <HAL_GPIO_Init+0x2d4>)
 80017b2:	699b      	ldr	r3, [r3, #24]
 80017b4:	2201      	movs	r2, #1
 80017b6:	4013      	ands	r3, r2
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017bc:	4a52      	ldr	r2, [pc, #328]	; (8001908 <HAL_GPIO_Init+0x2d8>)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	089b      	lsrs	r3, r3, #2
 80017c2:	3302      	adds	r3, #2
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	589b      	ldr	r3, [r3, r2]
 80017c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	2203      	movs	r2, #3
 80017ce:	4013      	ands	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	220f      	movs	r2, #15
 80017d4:	409a      	lsls	r2, r3
 80017d6:	0013      	movs	r3, r2
 80017d8:	43da      	mvns	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	2390      	movs	r3, #144	; 0x90
 80017e4:	05db      	lsls	r3, r3, #23
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d019      	beq.n	800181e <HAL_GPIO_Init+0x1ee>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a47      	ldr	r2, [pc, #284]	; (800190c <HAL_GPIO_Init+0x2dc>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d013      	beq.n	800181a <HAL_GPIO_Init+0x1ea>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a46      	ldr	r2, [pc, #280]	; (8001910 <HAL_GPIO_Init+0x2e0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d00d      	beq.n	8001816 <HAL_GPIO_Init+0x1e6>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a45      	ldr	r2, [pc, #276]	; (8001914 <HAL_GPIO_Init+0x2e4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d007      	beq.n	8001812 <HAL_GPIO_Init+0x1e2>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a44      	ldr	r2, [pc, #272]	; (8001918 <HAL_GPIO_Init+0x2e8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d101      	bne.n	800180e <HAL_GPIO_Init+0x1de>
 800180a:	2304      	movs	r3, #4
 800180c:	e008      	b.n	8001820 <HAL_GPIO_Init+0x1f0>
 800180e:	2305      	movs	r3, #5
 8001810:	e006      	b.n	8001820 <HAL_GPIO_Init+0x1f0>
 8001812:	2303      	movs	r3, #3
 8001814:	e004      	b.n	8001820 <HAL_GPIO_Init+0x1f0>
 8001816:	2302      	movs	r3, #2
 8001818:	e002      	b.n	8001820 <HAL_GPIO_Init+0x1f0>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_GPIO_Init+0x1f0>
 800181e:	2300      	movs	r3, #0
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	2103      	movs	r1, #3
 8001824:	400a      	ands	r2, r1
 8001826:	0092      	lsls	r2, r2, #2
 8001828:	4093      	lsls	r3, r2
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001830:	4935      	ldr	r1, [pc, #212]	; (8001908 <HAL_GPIO_Init+0x2d8>)
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	089b      	lsrs	r3, r3, #2
 8001836:	3302      	adds	r3, #2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183e:	4b37      	ldr	r3, [pc, #220]	; (800191c <HAL_GPIO_Init+0x2ec>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	43da      	mvns	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	4013      	ands	r3, r2
 800184c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	2380      	movs	r3, #128	; 0x80
 8001854:	035b      	lsls	r3, r3, #13
 8001856:	4013      	ands	r3, r2
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001862:	4b2e      	ldr	r3, [pc, #184]	; (800191c <HAL_GPIO_Init+0x2ec>)
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001868:	4b2c      	ldr	r3, [pc, #176]	; (800191c <HAL_GPIO_Init+0x2ec>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	43da      	mvns	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	039b      	lsls	r3, r3, #14
 8001880:	4013      	ands	r3, r2
 8001882:	d003      	beq.n	800188c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_GPIO_Init+0x2ec>)
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_GPIO_Init+0x2ec>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	43da      	mvns	r2, r3
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4013      	ands	r3, r2
 80018a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	029b      	lsls	r3, r3, #10
 80018aa:	4013      	ands	r3, r2
 80018ac:	d003      	beq.n	80018b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018ae:	693a      	ldr	r2, [r7, #16]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <HAL_GPIO_Init+0x2ec>)
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80018bc:	4b17      	ldr	r3, [pc, #92]	; (800191c <HAL_GPIO_Init+0x2ec>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	43da      	mvns	r2, r3
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	025b      	lsls	r3, r3, #9
 80018d4:	4013      	ands	r3, r2
 80018d6:	d003      	beq.n	80018e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018d8:	693a      	ldr	r2, [r7, #16]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <HAL_GPIO_Init+0x2ec>)
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	3301      	adds	r3, #1
 80018ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	40da      	lsrs	r2, r3
 80018f4:	1e13      	subs	r3, r2, #0
 80018f6:	d000      	beq.n	80018fa <HAL_GPIO_Init+0x2ca>
 80018f8:	e6a2      	b.n	8001640 <HAL_GPIO_Init+0x10>
  } 
}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b006      	add	sp, #24
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40021000 	.word	0x40021000
 8001908:	40010000 	.word	0x40010000
 800190c:	48000400 	.word	0x48000400
 8001910:	48000800 	.word	0x48000800
 8001914:	48000c00 	.word	0x48000c00
 8001918:	48001000 	.word	0x48001000
 800191c:	40010400 	.word	0x40010400

08001920 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	0008      	movs	r0, r1
 800192a:	0011      	movs	r1, r2
 800192c:	1cbb      	adds	r3, r7, #2
 800192e:	1c02      	adds	r2, r0, #0
 8001930:	801a      	strh	r2, [r3, #0]
 8001932:	1c7b      	adds	r3, r7, #1
 8001934:	1c0a      	adds	r2, r1, #0
 8001936:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001938:	1c7b      	adds	r3, r7, #1
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d004      	beq.n	800194a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001940:	1cbb      	adds	r3, r7, #2
 8001942:	881a      	ldrh	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001948:	e003      	b.n	8001952 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800194a:	1cbb      	adds	r3, r7, #2
 800194c:	881a      	ldrh	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	46bd      	mov	sp, r7
 8001956:	b002      	add	sp, #8
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	0002      	movs	r2, r0
 8001964:	1dbb      	adds	r3, r7, #6
 8001966:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	1dba      	adds	r2, r7, #6
 800196e:	8812      	ldrh	r2, [r2, #0]
 8001970:	4013      	ands	r3, r2
 8001972:	d008      	beq.n	8001986 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8001976:	1dba      	adds	r2, r7, #6
 8001978:	8812      	ldrh	r2, [r2, #0]
 800197a:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800197c:	1dbb      	adds	r3, r7, #6
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	0018      	movs	r0, r3
 8001982:	f7fe fc4d 	bl	8000220 <HAL_GPIO_EXTI_Callback>
  }
}
 8001986:	46c0      	nop			; (mov r8, r8)
 8001988:	46bd      	mov	sp, r7
 800198a:	b002      	add	sp, #8
 800198c:	bd80      	pop	{r7, pc}
 800198e:	46c0      	nop			; (mov r8, r8)
 8001990:	40010400 	.word	0x40010400

08001994 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d102      	bne.n	80019a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	f000 fb76 	bl	8002094 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2201      	movs	r2, #1
 80019ae:	4013      	ands	r3, r2
 80019b0:	d100      	bne.n	80019b4 <HAL_RCC_OscConfig+0x20>
 80019b2:	e08e      	b.n	8001ad2 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80019b4:	4bc5      	ldr	r3, [pc, #788]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	220c      	movs	r2, #12
 80019ba:	4013      	ands	r3, r2
 80019bc:	2b04      	cmp	r3, #4
 80019be:	d00e      	beq.n	80019de <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019c0:	4bc2      	ldr	r3, [pc, #776]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	220c      	movs	r2, #12
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	d117      	bne.n	80019fc <HAL_RCC_OscConfig+0x68>
 80019cc:	4bbf      	ldr	r3, [pc, #764]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	23c0      	movs	r3, #192	; 0xc0
 80019d2:	025b      	lsls	r3, r3, #9
 80019d4:	401a      	ands	r2, r3
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	025b      	lsls	r3, r3, #9
 80019da:	429a      	cmp	r2, r3
 80019dc:	d10e      	bne.n	80019fc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019de:	4bbb      	ldr	r3, [pc, #748]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	029b      	lsls	r3, r3, #10
 80019e6:	4013      	ands	r3, r2
 80019e8:	d100      	bne.n	80019ec <HAL_RCC_OscConfig+0x58>
 80019ea:	e071      	b.n	8001ad0 <HAL_RCC_OscConfig+0x13c>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d000      	beq.n	80019f6 <HAL_RCC_OscConfig+0x62>
 80019f4:	e06c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	f000 fb4c 	bl	8002094 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d107      	bne.n	8001a14 <HAL_RCC_OscConfig+0x80>
 8001a04:	4bb1      	ldr	r3, [pc, #708]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4bb0      	ldr	r3, [pc, #704]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001a0a:	2180      	movs	r1, #128	; 0x80
 8001a0c:	0249      	lsls	r1, r1, #9
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	e02f      	b.n	8001a74 <HAL_RCC_OscConfig+0xe0>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10c      	bne.n	8001a36 <HAL_RCC_OscConfig+0xa2>
 8001a1c:	4bab      	ldr	r3, [pc, #684]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	4baa      	ldr	r3, [pc, #680]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001a22:	49ab      	ldr	r1, [pc, #684]	; (8001cd0 <HAL_RCC_OscConfig+0x33c>)
 8001a24:	400a      	ands	r2, r1
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	4ba8      	ldr	r3, [pc, #672]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4ba7      	ldr	r3, [pc, #668]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001a2e:	49a9      	ldr	r1, [pc, #676]	; (8001cd4 <HAL_RCC_OscConfig+0x340>)
 8001a30:	400a      	ands	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	e01e      	b.n	8001a74 <HAL_RCC_OscConfig+0xe0>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	d10e      	bne.n	8001a5c <HAL_RCC_OscConfig+0xc8>
 8001a3e:	4ba3      	ldr	r3, [pc, #652]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	4ba2      	ldr	r3, [pc, #648]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001a44:	2180      	movs	r1, #128	; 0x80
 8001a46:	02c9      	lsls	r1, r1, #11
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	4b9f      	ldr	r3, [pc, #636]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b9e      	ldr	r3, [pc, #632]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001a52:	2180      	movs	r1, #128	; 0x80
 8001a54:	0249      	lsls	r1, r1, #9
 8001a56:	430a      	orrs	r2, r1
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCC_OscConfig+0xe0>
 8001a5c:	4b9b      	ldr	r3, [pc, #620]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b9a      	ldr	r3, [pc, #616]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001a62:	499b      	ldr	r1, [pc, #620]	; (8001cd0 <HAL_RCC_OscConfig+0x33c>)
 8001a64:	400a      	ands	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	4b98      	ldr	r3, [pc, #608]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b97      	ldr	r3, [pc, #604]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001a6e:	4999      	ldr	r1, [pc, #612]	; (8001cd4 <HAL_RCC_OscConfig+0x340>)
 8001a70:	400a      	ands	r2, r1
 8001a72:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d014      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7fe fe7e 	bl	800077c <HAL_GetTick>
 8001a80:	0003      	movs	r3, r0
 8001a82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a86:	f7fe fe79 	bl	800077c <HAL_GetTick>
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b64      	cmp	r3, #100	; 0x64
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e2fd      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a98:	4b8c      	ldr	r3, [pc, #560]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	2380      	movs	r3, #128	; 0x80
 8001a9e:	029b      	lsls	r3, r3, #10
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0xf2>
 8001aa4:	e015      	b.n	8001ad2 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7fe fe69 	bl	800077c <HAL_GetTick>
 8001aaa:	0003      	movs	r3, r0
 8001aac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ab0:	f7fe fe64 	bl	800077c <HAL_GetTick>
 8001ab4:	0002      	movs	r2, r0
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b64      	cmp	r3, #100	; 0x64
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e2e8      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ac2:	4b82      	ldr	r3, [pc, #520]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	2380      	movs	r3, #128	; 0x80
 8001ac8:	029b      	lsls	r3, r3, #10
 8001aca:	4013      	ands	r3, r2
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x11c>
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d100      	bne.n	8001ade <HAL_RCC_OscConfig+0x14a>
 8001adc:	e06c      	b.n	8001bb8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001ade:	4b7b      	ldr	r3, [pc, #492]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d00e      	beq.n	8001b06 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ae8:	4b78      	ldr	r3, [pc, #480]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	220c      	movs	r2, #12
 8001aee:	4013      	ands	r3, r2
 8001af0:	2b08      	cmp	r3, #8
 8001af2:	d11f      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1a0>
 8001af4:	4b75      	ldr	r3, [pc, #468]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	23c0      	movs	r3, #192	; 0xc0
 8001afa:	025b      	lsls	r3, r3, #9
 8001afc:	401a      	ands	r2, r3
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	021b      	lsls	r3, r3, #8
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d116      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b06:	4b71      	ldr	r3, [pc, #452]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d005      	beq.n	8001b1c <HAL_RCC_OscConfig+0x188>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e2bb      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1c:	4b6b      	ldr	r3, [pc, #428]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	22f8      	movs	r2, #248	; 0xf8
 8001b22:	4393      	bics	r3, r2
 8001b24:	0019      	movs	r1, r3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	00da      	lsls	r2, r3, #3
 8001b2c:	4b67      	ldr	r3, [pc, #412]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b32:	e041      	b.n	8001bb8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d024      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b3c:	4b63      	ldr	r3, [pc, #396]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b62      	ldr	r3, [pc, #392]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	430a      	orrs	r2, r1
 8001b46:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7fe fe18 	bl	800077c <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b52:	f7fe fe13 	bl	800077c <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e297      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b64:	4b59      	ldr	r3, [pc, #356]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d0f1      	beq.n	8001b52 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6e:	4b57      	ldr	r3, [pc, #348]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	22f8      	movs	r2, #248	; 0xf8
 8001b74:	4393      	bics	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	00da      	lsls	r2, r3, #3
 8001b7e:	4b53      	ldr	r3, [pc, #332]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001b80:	430a      	orrs	r2, r1
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	e018      	b.n	8001bb8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b86:	4b51      	ldr	r3, [pc, #324]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	4b50      	ldr	r3, [pc, #320]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	438a      	bics	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b92:	f7fe fdf3 	bl	800077c <HAL_GetTick>
 8001b96:	0003      	movs	r3, r0
 8001b98:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b9c:	f7fe fdee 	bl	800077c <HAL_GetTick>
 8001ba0:	0002      	movs	r2, r0
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e272      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bae:	4b47      	ldr	r3, [pc, #284]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2202      	movs	r2, #2
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	d1f1      	bne.n	8001b9c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2208      	movs	r2, #8
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d036      	beq.n	8001c30 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d019      	beq.n	8001bfe <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bca:	4b40      	ldr	r3, [pc, #256]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001bcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bce:	4b3f      	ldr	r3, [pc, #252]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd6:	f7fe fdd1 	bl	800077c <HAL_GetTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001be0:	f7fe fdcc 	bl	800077c <HAL_GetTick>
 8001be4:	0002      	movs	r2, r0
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e250      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf2:	4b36      	ldr	r3, [pc, #216]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	d0f1      	beq.n	8001be0 <HAL_RCC_OscConfig+0x24c>
 8001bfc:	e018      	b.n	8001c30 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfe:	4b33      	ldr	r3, [pc, #204]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c02:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001c04:	2101      	movs	r1, #1
 8001c06:	438a      	bics	r2, r1
 8001c08:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0a:	f7fe fdb7 	bl	800077c <HAL_GetTick>
 8001c0e:	0003      	movs	r3, r0
 8001c10:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c14:	f7fe fdb2 	bl	800077c <HAL_GetTick>
 8001c18:	0002      	movs	r2, r0
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e236      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c26:	4b29      	ldr	r3, [pc, #164]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d1f1      	bne.n	8001c14 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2204      	movs	r2, #4
 8001c36:	4013      	ands	r3, r2
 8001c38:	d100      	bne.n	8001c3c <HAL_RCC_OscConfig+0x2a8>
 8001c3a:	e0b5      	b.n	8001da8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3c:	201f      	movs	r0, #31
 8001c3e:	183b      	adds	r3, r7, r0
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c44:	4b21      	ldr	r3, [pc, #132]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001c46:	69da      	ldr	r2, [r3, #28]
 8001c48:	2380      	movs	r3, #128	; 0x80
 8001c4a:	055b      	lsls	r3, r3, #21
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d110      	bne.n	8001c72 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c50:	4b1e      	ldr	r3, [pc, #120]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001c52:	69da      	ldr	r2, [r3, #28]
 8001c54:	4b1d      	ldr	r3, [pc, #116]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001c56:	2180      	movs	r1, #128	; 0x80
 8001c58:	0549      	lsls	r1, r1, #21
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	61da      	str	r2, [r3, #28]
 8001c5e:	4b1b      	ldr	r3, [pc, #108]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001c60:	69da      	ldr	r2, [r3, #28]
 8001c62:	2380      	movs	r3, #128	; 0x80
 8001c64:	055b      	lsls	r3, r3, #21
 8001c66:	4013      	ands	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c6c:	183b      	adds	r3, r7, r0
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <HAL_RCC_OscConfig+0x344>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d11a      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <HAL_RCC_OscConfig+0x344>)
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_RCC_OscConfig+0x344>)
 8001c84:	2180      	movs	r1, #128	; 0x80
 8001c86:	0049      	lsls	r1, r1, #1
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c8c:	f7fe fd76 	bl	800077c <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c96:	f7fe fd71 	bl	800077c <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b64      	cmp	r3, #100	; 0x64
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e1f5      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_RCC_OscConfig+0x344>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d10f      	bne.n	8001cdc <HAL_RCC_OscConfig+0x348>
 8001cbc:	4b03      	ldr	r3, [pc, #12]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001cbe:	6a1a      	ldr	r2, [r3, #32]
 8001cc0:	4b02      	ldr	r3, [pc, #8]	; (8001ccc <HAL_RCC_OscConfig+0x338>)
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	621a      	str	r2, [r3, #32]
 8001cc8:	e036      	b.n	8001d38 <HAL_RCC_OscConfig+0x3a4>
 8001cca:	46c0      	nop			; (mov r8, r8)
 8001ccc:	40021000 	.word	0x40021000
 8001cd0:	fffeffff 	.word	0xfffeffff
 8001cd4:	fffbffff 	.word	0xfffbffff
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10c      	bne.n	8001cfe <HAL_RCC_OscConfig+0x36a>
 8001ce4:	4bca      	ldr	r3, [pc, #808]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001ce6:	6a1a      	ldr	r2, [r3, #32]
 8001ce8:	4bc9      	ldr	r3, [pc, #804]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	438a      	bics	r2, r1
 8001cee:	621a      	str	r2, [r3, #32]
 8001cf0:	4bc7      	ldr	r3, [pc, #796]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001cf2:	6a1a      	ldr	r2, [r3, #32]
 8001cf4:	4bc6      	ldr	r3, [pc, #792]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001cf6:	2104      	movs	r1, #4
 8001cf8:	438a      	bics	r2, r1
 8001cfa:	621a      	str	r2, [r3, #32]
 8001cfc:	e01c      	b.n	8001d38 <HAL_RCC_OscConfig+0x3a4>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b05      	cmp	r3, #5
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x38c>
 8001d06:	4bc2      	ldr	r3, [pc, #776]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001d08:	6a1a      	ldr	r2, [r3, #32]
 8001d0a:	4bc1      	ldr	r3, [pc, #772]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001d0c:	2104      	movs	r1, #4
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	621a      	str	r2, [r3, #32]
 8001d12:	4bbf      	ldr	r3, [pc, #764]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001d14:	6a1a      	ldr	r2, [r3, #32]
 8001d16:	4bbe      	ldr	r3, [pc, #760]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001d18:	2101      	movs	r1, #1
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	621a      	str	r2, [r3, #32]
 8001d1e:	e00b      	b.n	8001d38 <HAL_RCC_OscConfig+0x3a4>
 8001d20:	4bbb      	ldr	r3, [pc, #748]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001d22:	6a1a      	ldr	r2, [r3, #32]
 8001d24:	4bba      	ldr	r3, [pc, #744]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001d26:	2101      	movs	r1, #1
 8001d28:	438a      	bics	r2, r1
 8001d2a:	621a      	str	r2, [r3, #32]
 8001d2c:	4bb8      	ldr	r3, [pc, #736]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001d2e:	6a1a      	ldr	r2, [r3, #32]
 8001d30:	4bb7      	ldr	r3, [pc, #732]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001d32:	2104      	movs	r1, #4
 8001d34:	438a      	bics	r2, r1
 8001d36:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d014      	beq.n	8001d6a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d40:	f7fe fd1c 	bl	800077c <HAL_GetTick>
 8001d44:	0003      	movs	r3, r0
 8001d46:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d48:	e009      	b.n	8001d5e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d4a:	f7fe fd17 	bl	800077c <HAL_GetTick>
 8001d4e:	0002      	movs	r2, r0
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	4aaf      	ldr	r2, [pc, #700]	; (8002014 <HAL_RCC_OscConfig+0x680>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e19a      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5e:	4bac      	ldr	r3, [pc, #688]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	2202      	movs	r2, #2
 8001d64:	4013      	ands	r3, r2
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x3b6>
 8001d68:	e013      	b.n	8001d92 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6a:	f7fe fd07 	bl	800077c <HAL_GetTick>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d72:	e009      	b.n	8001d88 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f7fe fd02 	bl	800077c <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	4aa5      	ldr	r2, [pc, #660]	; (8002014 <HAL_RCC_OscConfig+0x680>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e185      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	4ba1      	ldr	r3, [pc, #644]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001d8a:	6a1b      	ldr	r3, [r3, #32]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d92:	231f      	movs	r3, #31
 8001d94:	18fb      	adds	r3, r7, r3
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d105      	bne.n	8001da8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d9c:	4b9c      	ldr	r3, [pc, #624]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001d9e:	69da      	ldr	r2, [r3, #28]
 8001da0:	4b9b      	ldr	r3, [pc, #620]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001da2:	499d      	ldr	r1, [pc, #628]	; (8002018 <HAL_RCC_OscConfig+0x684>)
 8001da4:	400a      	ands	r2, r1
 8001da6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2210      	movs	r2, #16
 8001dae:	4013      	ands	r3, r2
 8001db0:	d063      	beq.n	8001e7a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d12a      	bne.n	8001e10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001dba:	4b95      	ldr	r3, [pc, #596]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dbe:	4b94      	ldr	r3, [pc, #592]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001dc0:	2104      	movs	r1, #4
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001dc6:	4b92      	ldr	r3, [pc, #584]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001dc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dca:	4b91      	ldr	r3, [pc, #580]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001dcc:	2101      	movs	r1, #1
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd2:	f7fe fcd3 	bl	800077c <HAL_GetTick>
 8001dd6:	0003      	movs	r3, r0
 8001dd8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001ddc:	f7fe fcce 	bl	800077c <HAL_GetTick>
 8001de0:	0002      	movs	r2, r0
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e152      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001dee:	4b88      	ldr	r3, [pc, #544]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df2:	2202      	movs	r2, #2
 8001df4:	4013      	ands	r3, r2
 8001df6:	d0f1      	beq.n	8001ddc <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001df8:	4b85      	ldr	r3, [pc, #532]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfc:	22f8      	movs	r2, #248	; 0xf8
 8001dfe:	4393      	bics	r3, r2
 8001e00:	0019      	movs	r1, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	00da      	lsls	r2, r3, #3
 8001e08:	4b81      	ldr	r3, [pc, #516]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e0e:	e034      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	3305      	adds	r3, #5
 8001e16:	d111      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001e18:	4b7d      	ldr	r3, [pc, #500]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001e1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e1c:	4b7c      	ldr	r3, [pc, #496]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001e1e:	2104      	movs	r1, #4
 8001e20:	438a      	bics	r2, r1
 8001e22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001e24:	4b7a      	ldr	r3, [pc, #488]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e28:	22f8      	movs	r2, #248	; 0xf8
 8001e2a:	4393      	bics	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	00da      	lsls	r2, r3, #3
 8001e34:	4b76      	ldr	r3, [pc, #472]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001e36:	430a      	orrs	r2, r1
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34
 8001e3a:	e01e      	b.n	8001e7a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001e3c:	4b74      	ldr	r3, [pc, #464]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e40:	4b73      	ldr	r3, [pc, #460]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001e42:	2104      	movs	r1, #4
 8001e44:	430a      	orrs	r2, r1
 8001e46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001e48:	4b71      	ldr	r3, [pc, #452]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e4c:	4b70      	ldr	r3, [pc, #448]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001e4e:	2101      	movs	r1, #1
 8001e50:	438a      	bics	r2, r1
 8001e52:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e54:	f7fe fc92 	bl	800077c <HAL_GetTick>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001e5e:	f7fe fc8d 	bl	800077c <HAL_GetTick>
 8001e62:	0002      	movs	r2, r0
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e111      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001e70:	4b67      	ldr	r3, [pc, #412]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e74:	2202      	movs	r2, #2
 8001e76:	4013      	ands	r3, r2
 8001e78:	d1f1      	bne.n	8001e5e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2220      	movs	r2, #32
 8001e80:	4013      	ands	r3, r2
 8001e82:	d05c      	beq.n	8001f3e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e84:	4b62      	ldr	r3, [pc, #392]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	220c      	movs	r2, #12
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b0c      	cmp	r3, #12
 8001e8e:	d00e      	beq.n	8001eae <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e90:	4b5f      	ldr	r3, [pc, #380]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	220c      	movs	r2, #12
 8001e96:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001e98:	2b08      	cmp	r3, #8
 8001e9a:	d114      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001e9c:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	23c0      	movs	r3, #192	; 0xc0
 8001ea2:	025b      	lsls	r3, r3, #9
 8001ea4:	401a      	ands	r2, r3
 8001ea6:	23c0      	movs	r3, #192	; 0xc0
 8001ea8:	025b      	lsls	r3, r3, #9
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d10b      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001eae:	4b58      	ldr	r3, [pc, #352]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001eb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb2:	2380      	movs	r3, #128	; 0x80
 8001eb4:	029b      	lsls	r3, r3, #10
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d040      	beq.n	8001f3c <HAL_RCC_OscConfig+0x5a8>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6a1b      	ldr	r3, [r3, #32]
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d03c      	beq.n	8001f3c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e0e6      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d01b      	beq.n	8001f06 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001ece:	4b50      	ldr	r3, [pc, #320]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed2:	4b4f      	ldr	r3, [pc, #316]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001ed4:	2180      	movs	r1, #128	; 0x80
 8001ed6:	0249      	lsls	r1, r1, #9
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001edc:	f7fe fc4e 	bl	800077c <HAL_GetTick>
 8001ee0:	0003      	movs	r3, r0
 8001ee2:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ee6:	f7fe fc49 	bl	800077c <HAL_GetTick>
 8001eea:	0002      	movs	r2, r0
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0cd      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001ef8:	4b45      	ldr	r3, [pc, #276]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001efa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	029b      	lsls	r3, r3, #10
 8001f00:	4013      	ands	r3, r2
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x552>
 8001f04:	e01b      	b.n	8001f3e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001f06:	4b42      	ldr	r3, [pc, #264]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001f08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f0a:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001f0c:	4943      	ldr	r1, [pc, #268]	; (800201c <HAL_RCC_OscConfig+0x688>)
 8001f0e:	400a      	ands	r2, r1
 8001f10:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f12:	f7fe fc33 	bl	800077c <HAL_GetTick>
 8001f16:	0003      	movs	r3, r0
 8001f18:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f1c:	f7fe fc2e 	bl	800077c <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e0b2      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001f2e:	4b38      	ldr	r3, [pc, #224]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001f30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f32:	2380      	movs	r3, #128	; 0x80
 8001f34:	029b      	lsls	r3, r3, #10
 8001f36:	4013      	ands	r3, r2
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x588>
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001f3c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d100      	bne.n	8001f48 <HAL_RCC_OscConfig+0x5b4>
 8001f46:	e0a4      	b.n	8002092 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f48:	4b31      	ldr	r3, [pc, #196]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	220c      	movs	r2, #12
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d100      	bne.n	8001f56 <HAL_RCC_OscConfig+0x5c2>
 8001f54:	e078      	b.n	8002048 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d14c      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	4b2b      	ldr	r3, [pc, #172]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001f64:	492e      	ldr	r1, [pc, #184]	; (8002020 <HAL_RCC_OscConfig+0x68c>)
 8001f66:	400a      	ands	r2, r1
 8001f68:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7fe fc07 	bl	800077c <HAL_GetTick>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f74:	f7fe fc02 	bl	800077c <HAL_GetTick>
 8001f78:	0002      	movs	r2, r0
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e086      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	049b      	lsls	r3, r3, #18
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d1f0      	bne.n	8001f74 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f92:	4b1f      	ldr	r3, [pc, #124]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	220f      	movs	r2, #15
 8001f98:	4393      	bics	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <HAL_RCC_OscConfig+0x690>)
 8001fac:	4013      	ands	r3, r2
 8001fae:	0019      	movs	r1, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	4b15      	ldr	r3, [pc, #84]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001fc6:	2180      	movs	r1, #128	; 0x80
 8001fc8:	0449      	lsls	r1, r1, #17
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7fe fbd5 	bl	800077c <HAL_GetTick>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7fe fbd0 	bl	800077c <HAL_GetTick>
 8001fdc:	0002      	movs	r2, r0
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e054      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	049b      	lsls	r3, r3, #18
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0x644>
 8001ff6:	e04c      	b.n	8002092 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ff8:	4b05      	ldr	r3, [pc, #20]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <HAL_RCC_OscConfig+0x67c>)
 8001ffe:	4908      	ldr	r1, [pc, #32]	; (8002020 <HAL_RCC_OscConfig+0x68c>)
 8002000:	400a      	ands	r2, r1
 8002002:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002004:	f7fe fbba 	bl	800077c <HAL_GetTick>
 8002008:	0003      	movs	r3, r0
 800200a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800200c:	e015      	b.n	800203a <HAL_RCC_OscConfig+0x6a6>
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	40021000 	.word	0x40021000
 8002014:	00001388 	.word	0x00001388
 8002018:	efffffff 	.word	0xefffffff
 800201c:	fffeffff 	.word	0xfffeffff
 8002020:	feffffff 	.word	0xfeffffff
 8002024:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002028:	f7fe fba8 	bl	800077c <HAL_GetTick>
 800202c:	0002      	movs	r2, r0
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e02c      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800203a:	4b18      	ldr	r3, [pc, #96]	; (800209c <HAL_RCC_OscConfig+0x708>)
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	2380      	movs	r3, #128	; 0x80
 8002040:	049b      	lsls	r3, r3, #18
 8002042:	4013      	ands	r3, r2
 8002044:	d1f0      	bne.n	8002028 <HAL_RCC_OscConfig+0x694>
 8002046:	e024      	b.n	8002092 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e01f      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_RCC_OscConfig+0x708>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800205a:	4b10      	ldr	r3, [pc, #64]	; (800209c <HAL_RCC_OscConfig+0x708>)
 800205c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	23c0      	movs	r3, #192	; 0xc0
 8002064:	025b      	lsls	r3, r3, #9
 8002066:	401a      	ands	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	429a      	cmp	r2, r3
 800206e:	d10e      	bne.n	800208e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	220f      	movs	r2, #15
 8002074:	401a      	ands	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800207a:	429a      	cmp	r2, r3
 800207c:	d107      	bne.n	800208e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	23f0      	movs	r3, #240	; 0xf0
 8002082:	039b      	lsls	r3, r3, #14
 8002084:	401a      	ands	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b008      	add	sp, #32
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0bf      	b.n	8002234 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020b4:	4b61      	ldr	r3, [pc, #388]	; (800223c <HAL_RCC_ClockConfig+0x19c>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2201      	movs	r2, #1
 80020ba:	4013      	ands	r3, r2
 80020bc:	683a      	ldr	r2, [r7, #0]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d911      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020c2:	4b5e      	ldr	r3, [pc, #376]	; (800223c <HAL_RCC_ClockConfig+0x19c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	2201      	movs	r2, #1
 80020c8:	4393      	bics	r3, r2
 80020ca:	0019      	movs	r1, r3
 80020cc:	4b5b      	ldr	r3, [pc, #364]	; (800223c <HAL_RCC_ClockConfig+0x19c>)
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d4:	4b59      	ldr	r3, [pc, #356]	; (800223c <HAL_RCC_ClockConfig+0x19c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2201      	movs	r2, #1
 80020da:	4013      	ands	r3, r2
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	429a      	cmp	r2, r3
 80020e0:	d001      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e0a6      	b.n	8002234 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2202      	movs	r2, #2
 80020ec:	4013      	ands	r3, r2
 80020ee:	d015      	beq.n	800211c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2204      	movs	r2, #4
 80020f6:	4013      	ands	r3, r2
 80020f8:	d006      	beq.n	8002108 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020fa:	4b51      	ldr	r3, [pc, #324]	; (8002240 <HAL_RCC_ClockConfig+0x1a0>)
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	4b50      	ldr	r3, [pc, #320]	; (8002240 <HAL_RCC_ClockConfig+0x1a0>)
 8002100:	21e0      	movs	r1, #224	; 0xe0
 8002102:	00c9      	lsls	r1, r1, #3
 8002104:	430a      	orrs	r2, r1
 8002106:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002108:	4b4d      	ldr	r3, [pc, #308]	; (8002240 <HAL_RCC_ClockConfig+0x1a0>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	22f0      	movs	r2, #240	; 0xf0
 800210e:	4393      	bics	r3, r2
 8002110:	0019      	movs	r1, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	4b4a      	ldr	r3, [pc, #296]	; (8002240 <HAL_RCC_ClockConfig+0x1a0>)
 8002118:	430a      	orrs	r2, r1
 800211a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2201      	movs	r2, #1
 8002122:	4013      	ands	r3, r2
 8002124:	d04c      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d107      	bne.n	800213e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212e:	4b44      	ldr	r3, [pc, #272]	; (8002240 <HAL_RCC_ClockConfig+0x1a0>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	2380      	movs	r3, #128	; 0x80
 8002134:	029b      	lsls	r3, r3, #10
 8002136:	4013      	ands	r3, r2
 8002138:	d120      	bne.n	800217c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e07a      	b.n	8002234 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b02      	cmp	r3, #2
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002146:	4b3e      	ldr	r3, [pc, #248]	; (8002240 <HAL_RCC_ClockConfig+0x1a0>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	2380      	movs	r3, #128	; 0x80
 800214c:	049b      	lsls	r3, r3, #18
 800214e:	4013      	ands	r3, r2
 8002150:	d114      	bne.n	800217c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e06e      	b.n	8002234 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b03      	cmp	r3, #3
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800215e:	4b38      	ldr	r3, [pc, #224]	; (8002240 <HAL_RCC_ClockConfig+0x1a0>)
 8002160:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	029b      	lsls	r3, r3, #10
 8002166:	4013      	ands	r3, r2
 8002168:	d108      	bne.n	800217c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e062      	b.n	8002234 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216e:	4b34      	ldr	r3, [pc, #208]	; (8002240 <HAL_RCC_ClockConfig+0x1a0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2202      	movs	r2, #2
 8002174:	4013      	ands	r3, r2
 8002176:	d101      	bne.n	800217c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e05b      	b.n	8002234 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800217c:	4b30      	ldr	r3, [pc, #192]	; (8002240 <HAL_RCC_ClockConfig+0x1a0>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2203      	movs	r2, #3
 8002182:	4393      	bics	r3, r2
 8002184:	0019      	movs	r1, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_RCC_ClockConfig+0x1a0>)
 800218c:	430a      	orrs	r2, r1
 800218e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002190:	f7fe faf4 	bl	800077c <HAL_GetTick>
 8002194:	0003      	movs	r3, r0
 8002196:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002198:	e009      	b.n	80021ae <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800219a:	f7fe faef 	bl	800077c <HAL_GetTick>
 800219e:	0002      	movs	r2, r0
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	4a27      	ldr	r2, [pc, #156]	; (8002244 <HAL_RCC_ClockConfig+0x1a4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e042      	b.n	8002234 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_RCC_ClockConfig+0x1a0>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	220c      	movs	r2, #12
 80021b4:	401a      	ands	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	429a      	cmp	r2, r3
 80021be:	d1ec      	bne.n	800219a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c0:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_RCC_ClockConfig+0x19c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2201      	movs	r2, #1
 80021c6:	4013      	ands	r3, r2
 80021c8:	683a      	ldr	r2, [r7, #0]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d211      	bcs.n	80021f2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ce:	4b1b      	ldr	r3, [pc, #108]	; (800223c <HAL_RCC_ClockConfig+0x19c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2201      	movs	r2, #1
 80021d4:	4393      	bics	r3, r2
 80021d6:	0019      	movs	r1, r3
 80021d8:	4b18      	ldr	r3, [pc, #96]	; (800223c <HAL_RCC_ClockConfig+0x19c>)
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e0:	4b16      	ldr	r3, [pc, #88]	; (800223c <HAL_RCC_ClockConfig+0x19c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2201      	movs	r2, #1
 80021e6:	4013      	ands	r3, r2
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e020      	b.n	8002234 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2204      	movs	r2, #4
 80021f8:	4013      	ands	r3, r2
 80021fa:	d009      	beq.n	8002210 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4b10      	ldr	r3, [pc, #64]	; (8002240 <HAL_RCC_ClockConfig+0x1a0>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4a11      	ldr	r2, [pc, #68]	; (8002248 <HAL_RCC_ClockConfig+0x1a8>)
 8002202:	4013      	ands	r3, r2
 8002204:	0019      	movs	r1, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <HAL_RCC_ClockConfig+0x1a0>)
 800220c:	430a      	orrs	r2, r1
 800220e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002210:	f000 f820 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 8002214:	0001      	movs	r1, r0
 8002216:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <HAL_RCC_ClockConfig+0x1a0>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	091b      	lsrs	r3, r3, #4
 800221c:	220f      	movs	r2, #15
 800221e:	4013      	ands	r3, r2
 8002220:	4a0a      	ldr	r2, [pc, #40]	; (800224c <HAL_RCC_ClockConfig+0x1ac>)
 8002222:	5cd3      	ldrb	r3, [r2, r3]
 8002224:	000a      	movs	r2, r1
 8002226:	40da      	lsrs	r2, r3
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <HAL_RCC_ClockConfig+0x1b0>)
 800222a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800222c:	2003      	movs	r0, #3
 800222e:	f7fe fa5f 	bl	80006f0 <HAL_InitTick>
  
  return HAL_OK;
 8002232:	2300      	movs	r3, #0
}
 8002234:	0018      	movs	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	b004      	add	sp, #16
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40022000 	.word	0x40022000
 8002240:	40021000 	.word	0x40021000
 8002244:	00001388 	.word	0x00001388
 8002248:	fffff8ff 	.word	0xfffff8ff
 800224c:	080023a8 	.word	0x080023a8
 8002250:	20000000 	.word	0x20000000

08002254 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	2300      	movs	r3, #0
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800226e:	4b2d      	ldr	r3, [pc, #180]	; (8002324 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	220c      	movs	r2, #12
 8002278:	4013      	ands	r3, r2
 800227a:	2b0c      	cmp	r3, #12
 800227c:	d046      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0xb8>
 800227e:	d848      	bhi.n	8002312 <HAL_RCC_GetSysClockFreq+0xbe>
 8002280:	2b04      	cmp	r3, #4
 8002282:	d002      	beq.n	800228a <HAL_RCC_GetSysClockFreq+0x36>
 8002284:	2b08      	cmp	r3, #8
 8002286:	d003      	beq.n	8002290 <HAL_RCC_GetSysClockFreq+0x3c>
 8002288:	e043      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800228a:	4b27      	ldr	r3, [pc, #156]	; (8002328 <HAL_RCC_GetSysClockFreq+0xd4>)
 800228c:	613b      	str	r3, [r7, #16]
      break;
 800228e:	e043      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	0c9b      	lsrs	r3, r3, #18
 8002294:	220f      	movs	r2, #15
 8002296:	4013      	ands	r3, r2
 8002298:	4a24      	ldr	r2, [pc, #144]	; (800232c <HAL_RCC_GetSysClockFreq+0xd8>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800229e:	4b21      	ldr	r3, [pc, #132]	; (8002324 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	220f      	movs	r2, #15
 80022a4:	4013      	ands	r3, r2
 80022a6:	4a22      	ldr	r2, [pc, #136]	; (8002330 <HAL_RCC_GetSysClockFreq+0xdc>)
 80022a8:	5cd3      	ldrb	r3, [r2, r3]
 80022aa:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	23c0      	movs	r3, #192	; 0xc0
 80022b0:	025b      	lsls	r3, r3, #9
 80022b2:	401a      	ands	r2, r3
 80022b4:	2380      	movs	r3, #128	; 0x80
 80022b6:	025b      	lsls	r3, r3, #9
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d109      	bne.n	80022d0 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022bc:	68b9      	ldr	r1, [r7, #8]
 80022be:	481a      	ldr	r0, [pc, #104]	; (8002328 <HAL_RCC_GetSysClockFreq+0xd4>)
 80022c0:	f7fd ff22 	bl	8000108 <__udivsi3>
 80022c4:	0003      	movs	r3, r0
 80022c6:	001a      	movs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4353      	muls	r3, r2
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	e01a      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	23c0      	movs	r3, #192	; 0xc0
 80022d4:	025b      	lsls	r3, r3, #9
 80022d6:	401a      	ands	r2, r3
 80022d8:	23c0      	movs	r3, #192	; 0xc0
 80022da:	025b      	lsls	r3, r3, #9
 80022dc:	429a      	cmp	r2, r3
 80022de:	d109      	bne.n	80022f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022e0:	68b9      	ldr	r1, [r7, #8]
 80022e2:	4814      	ldr	r0, [pc, #80]	; (8002334 <HAL_RCC_GetSysClockFreq+0xe0>)
 80022e4:	f7fd ff10 	bl	8000108 <__udivsi3>
 80022e8:	0003      	movs	r3, r0
 80022ea:	001a      	movs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4353      	muls	r3, r2
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	e008      	b.n	8002306 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	480c      	ldr	r0, [pc, #48]	; (8002328 <HAL_RCC_GetSysClockFreq+0xd4>)
 80022f8:	f7fd ff06 	bl	8000108 <__udivsi3>
 80022fc:	0003      	movs	r3, r0
 80022fe:	001a      	movs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4353      	muls	r3, r2
 8002304:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	613b      	str	r3, [r7, #16]
      break;
 800230a:	e005      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800230c:	4b09      	ldr	r3, [pc, #36]	; (8002334 <HAL_RCC_GetSysClockFreq+0xe0>)
 800230e:	613b      	str	r3, [r7, #16]
      break;
 8002310:	e002      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002312:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_RCC_GetSysClockFreq+0xd4>)
 8002314:	613b      	str	r3, [r7, #16]
      break;
 8002316:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002318:	693b      	ldr	r3, [r7, #16]
}
 800231a:	0018      	movs	r0, r3
 800231c:	46bd      	mov	sp, r7
 800231e:	b006      	add	sp, #24
 8002320:	bd80      	pop	{r7, pc}
 8002322:	46c0      	nop			; (mov r8, r8)
 8002324:	40021000 	.word	0x40021000
 8002328:	007a1200 	.word	0x007a1200
 800232c:	080023b8 	.word	0x080023b8
 8002330:	080023c8 	.word	0x080023c8
 8002334:	02dc6c00 	.word	0x02dc6c00

08002338 <memset>:
 8002338:	0003      	movs	r3, r0
 800233a:	1882      	adds	r2, r0, r2
 800233c:	4293      	cmp	r3, r2
 800233e:	d100      	bne.n	8002342 <memset+0xa>
 8002340:	4770      	bx	lr
 8002342:	7019      	strb	r1, [r3, #0]
 8002344:	3301      	adds	r3, #1
 8002346:	e7f9      	b.n	800233c <memset+0x4>

08002348 <__libc_init_array>:
 8002348:	b570      	push	{r4, r5, r6, lr}
 800234a:	2600      	movs	r6, #0
 800234c:	4c0c      	ldr	r4, [pc, #48]	; (8002380 <__libc_init_array+0x38>)
 800234e:	4d0d      	ldr	r5, [pc, #52]	; (8002384 <__libc_init_array+0x3c>)
 8002350:	1b64      	subs	r4, r4, r5
 8002352:	10a4      	asrs	r4, r4, #2
 8002354:	42a6      	cmp	r6, r4
 8002356:	d109      	bne.n	800236c <__libc_init_array+0x24>
 8002358:	2600      	movs	r6, #0
 800235a:	f000 f819 	bl	8002390 <_init>
 800235e:	4c0a      	ldr	r4, [pc, #40]	; (8002388 <__libc_init_array+0x40>)
 8002360:	4d0a      	ldr	r5, [pc, #40]	; (800238c <__libc_init_array+0x44>)
 8002362:	1b64      	subs	r4, r4, r5
 8002364:	10a4      	asrs	r4, r4, #2
 8002366:	42a6      	cmp	r6, r4
 8002368:	d105      	bne.n	8002376 <__libc_init_array+0x2e>
 800236a:	bd70      	pop	{r4, r5, r6, pc}
 800236c:	00b3      	lsls	r3, r6, #2
 800236e:	58eb      	ldr	r3, [r5, r3]
 8002370:	4798      	blx	r3
 8002372:	3601      	adds	r6, #1
 8002374:	e7ee      	b.n	8002354 <__libc_init_array+0xc>
 8002376:	00b3      	lsls	r3, r6, #2
 8002378:	58eb      	ldr	r3, [r5, r3]
 800237a:	4798      	blx	r3
 800237c:	3601      	adds	r6, #1
 800237e:	e7f2      	b.n	8002366 <__libc_init_array+0x1e>
 8002380:	080023d8 	.word	0x080023d8
 8002384:	080023d8 	.word	0x080023d8
 8002388:	080023dc 	.word	0x080023dc
 800238c:	080023d8 	.word	0x080023d8

08002390 <_init>:
 8002390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002392:	46c0      	nop			; (mov r8, r8)
 8002394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002396:	bc08      	pop	{r3}
 8002398:	469e      	mov	lr, r3
 800239a:	4770      	bx	lr

0800239c <_fini>:
 800239c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023a2:	bc08      	pop	{r3}
 80023a4:	469e      	mov	lr, r3
 80023a6:	4770      	bx	lr
